pluginManagement {
    includeBuild(new File(["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().toString())
}
plugins { id("com.facebook.react.settings") }

extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
  if (false) {
    ex.autolinkLibrariesFromCommand()
  } else {
    // Autolinking dezactivat temporar, deci nu se apelează nicio comandă
    // Dacă vrei să păstrezi opțiunea de a adăuga un comandă personalizată, o poți păstra comentată
    // def command = [
    //   'node',
    //   '--no-warnings',
    //   '--eval',
    //   'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
    //   'react-native-config',
    //   '--json',
    //   '--platform',
    //   'android'
    // ].toList()
    //
    // ex.autolinkLibrariesFromCommand(command)
  }
}


rootProject.name = 'SmartWater'

dependencyResolutionManagement {
  versionCatalogs {
    reactAndroidLibs {
      from(files(new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim(), "../gradle/libs.versions.toml")))
    }
  }
}

apply from: new File(["node", "--print", "require.resolve('expo/package.json')"].execute(null, rootDir).text.trim(), "../scripts/autolinking.gradle");
useExpoModules()

include ':app'
includeBuild(new File(["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile())
