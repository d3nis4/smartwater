{
    "sourceFile": "app/(auth)/weather.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1745760835019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745760863139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,14 +105,16 @@\n \r\n \r\n   const handleLocationButtonPress = async () => {\r\n     let { status } = await Location.requestForegroundPermissionsAsync();\r\n-    if (status !== 'granted') {\r\n-      console.log('Permission to access location was denied');\r\n-      return;\r\n-    }\r\n+      if (status !== 'granted') return;\r\n \r\n     const { coords } = await Location.getCurrentPositionAsync({});\r\n+      const locationString = `${coords.latitude},${coords.longitude}`;\r\n+      \r\n+      // Salvează coordonatele ca string\r\n+      await AsyncStorage.setItem('lastCity', locationString);\r\n+      \r\n     setLocation({ lat: coords.latitude, lon: coords.longitude });\r\n       const weatherData = await fetchWeatherForecast({\r\n         cityName: locationString,\r\n         days: '7'\r\n@@ -159,8 +161,19 @@\n   // Load the last searched city from AsyncStorage\r\n   const loadLastCity = async () => {\r\n     const savedCity = await AsyncStorage.getItem('lastCity');\r\n     if (savedCity) {\r\n+        // Verifică dacă salvarea conține coordonate GPS (format \"lat,lon\")\r\n+        if (savedCity.includes(',')) {\r\n+          const [lat, lon] = savedCity.split(',');\r\n+          const weatherData = await fetchWeatherForecast({\r\n+            cityName: savedCity,\r\n+            days: '7'\r\n+          });\r\n+          setWeather(weatherData);\r\n+          setLocation({ lat: parseFloat(lat), lon: parseFloat(lon) });\r\n+        } else {\r\n+          // Este un nume de oraș normal\r\n       await fetchWeatherData(savedCity);\r\n       setSearchQuery(savedCity);\r\n     } else {\r\n \r\n"
                },
                {
                    "date": 1745760869498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,8 +159,9 @@\n   };\r\n \r\n   // Load the last searched city from AsyncStorage\r\n   const loadLastCity = async () => {\r\n+    try {\r\n     const savedCity = await AsyncStorage.getItem('lastCity');\r\n     if (savedCity) {\r\n         // Verifică dacă salvarea conține coordonate GPS (format \"lat,lon\")\r\n         if (savedCity.includes(',')) {\r\n@@ -175,11 +176,14 @@\n           // Este un nume de oraș normal\r\n       await fetchWeatherData(savedCity);\r\n       setSearchQuery(savedCity);\r\n     } else {\r\n-\r\n+        // Locație implicită dacă nu există salvări\r\n       await fetchWeatherData('Bucuresti');\r\n       setSearchQuery('Bucuresti');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error loading last city:', error);\r\n     }\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1745760887102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,10 @@\n \r\n import Icon from 'react-native-vector-icons/MaterialIcons'; // Sau alt set de iconițe\r\n \r\n \r\n+\r\n+\r\n const getDynamicStyles = (tempC) => StyleSheet.create({\r\n   text: {\r\n     color: tempC > 10 ? 'rgba(31, 31, 31, 0.82)' : 'rgba(255,255,255,0.9)',\r\n   }\r\n@@ -174,8 +176,9 @@\n           setLocation({ lat: parseFloat(lat), lon: parseFloat(lon) });\r\n         } else {\r\n           // Este un nume de oraș normal\r\n       await fetchWeatherData(savedCity);\r\n+        }\r\n       setSearchQuery(savedCity);\r\n     } else {\r\n         // Locație implicită dacă nu există salvări\r\n       await fetchWeatherData('Bucuresti');\r\n"
                },
                {
                    "date": 1745760899839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,11 +130,9 @@\n       });\r\n       if (reverseGeocode[0]?.city) {\r\n         setSearchQuery(reverseGeocode[0].city);\r\n       }\r\n-    } catch (error) {\r\n-      console.error('Error getting location:', error);\r\n-    }\r\n+    } \r\n   };\r\n \r\n   const handleSearch = async (text) => {\r\n     setSearchQuery(text);\r\n"
                },
                {
                    "date": 1745760967221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,13 +110,24 @@\n     let { status } = await Location.requestForegroundPermissionsAsync();\r\n       if (status !== 'granted') return;\r\n \r\n     const { coords } = await Location.getCurrentPositionAsync({});\r\n+      \r\n+      // Salvează atât coordonatele cât și numele orașului\r\n       const locationString = `${coords.latitude},${coords.longitude}`;\r\n+      const reverseGeocode = await Location.reverseGeocodeAsync({\r\n+        latitude: coords.latitude,\r\n+        longitude: coords.longitude\r\n+      });\r\n       \r\n-      // Salvează coordonatele ca string\r\n-      await AsyncStorage.setItem('lastCity', locationString);\r\n+      const cityName = reverseGeocode[0]?.city || reverseGeocode[0]?.region || \"Locație curentă\";\r\n       \r\n+      // Salvează în AsyncStorage sub două chei diferite\r\n+      await AsyncStorage.multiSet([\r\n+        ['lastCoordinates', locationString],\r\n+        ['lastCityName', cityName]\r\n+      ]);\r\n+      \r\n     setLocation({ lat: coords.latitude, lon: coords.longitude });\r\n       const weatherData = await fetchWeatherForecast({\r\n         cityName: locationString,\r\n         days: '7'\r\n"
                },
                {
                    "date": 1745760972860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,10 +104,10 @@\n       setLoading(false);\r\n     }\r\n   };\r\n \r\n-\r\n   const handleLocationButtonPress = async () => {\r\n+    try {\r\n     let { status } = await Location.requestForegroundPermissionsAsync();\r\n       if (status !== 'granted') return;\r\n \r\n     const { coords } = await Location.getCurrentPositionAsync({});\r\n@@ -126,9 +126,13 @@\n         ['lastCoordinates', locationString],\r\n         ['lastCityName', cityName]\r\n       ]);\r\n       \r\n+      // Actualizează starea\r\n     setLocation({ lat: coords.latitude, lon: coords.longitude });\r\n+      setSearchQuery(cityName);\r\n+      \r\n+      // Obține vremea\r\n       const weatherData = await fetchWeatherForecast({\r\n         cityName: locationString,\r\n         days: '7'\r\n       });\r\n"
                },
                {
                    "date": 1745760977980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,24 +137,19 @@\n         days: '7'\r\n       });\r\n       setWeather(weatherData);\r\n   \r\n-      // Actualizează searchQuery cu numele orașului (dacă este disponibil)\r\n-      const reverseGeocode = await Location.reverseGeocodeAsync({\r\n-        latitude: coords.latitude,\r\n-        longitude: coords.longitude\r\n-      });\r\n-      if (reverseGeocode[0]?.city) {\r\n-        setSearchQuery(reverseGeocode[0].city);\r\n-      }\r\n+    } catch (error) {\r\n+      console.error('Error getting location:', error);\r\n     } \r\n   };\r\n \r\n   const handleSearch = async (text) => {\r\n     setSearchQuery(text);\r\n     if (text) {\r\n       try {\r\n         const locationData = await fetchLocations({ cityName: text });\r\n+        \r\n         setLocations(locationData || []);\r\n       } catch (error) {\r\n         console.error('Error fetching locations:', error);\r\n       }\r\n@@ -172,8 +167,44 @@\n \r\n     await AsyncStorage.setItem('lastCity', city.name);\r\n   };\r\n \r\n+  const loadLastLocation = async () => {\r\n+    try {\r\n+      // Încarcă ambele valori salvate\r\n+      const [savedCoords, savedCity] = await AsyncStorage.multiGet([\r\n+        'lastCoordinates',\r\n+        'lastCityName'\r\n+      ]);\r\n+  \r\n+      // Prioritizează locația GPS dacă există\r\n+      if (savedCoords[1]) {\r\n+        const [lat, lon] = savedCoords[1].split(',');\r\n+        const weatherData = await fetchWeatherForecast({\r\n+          cityName: savedCoords[1],\r\n+          days: '7'\r\n+        });\r\n+        setWeather(weatherData);\r\n+        setLocation({ lat: parseFloat(lat), lon: parseFloat(lon) });\r\n+        setSearchQuery(savedCity[1] || \"Locație curentă\");\r\n+      } \r\n+      // Dacă nu există GPS, folosește ultimul oraș căutat\r\n+      else if (savedCity[1]) {\r\n+        await fetchWeatherData(savedCity[1]);\r\n+        setSearchQuery(savedCity[1]);\r\n+      } \r\n+      // Locație implicită\r\n+      else {\r\n+        await fetchWeatherData('București');\r\n+        setSearchQuery('București');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error loading last location:', error);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    loadLastLocation();\r\n+  }, []);\r\n   // Load the last searched city from AsyncStorage\r\n   const loadLastCity = async () => {\r\n     try {\r\n     const savedCity = await AsyncStorage.getItem('lastCity');\r\n"
                },
                {
                    "date": 1745760995750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,23 +2,23 @@\n import { View, Text, Dimensions,Modal, TextInput, TouchableOpacity, Image, SafeAreaView, ScrollView, StatusBar, StyleSheet } from 'react-native';\r\n import Ionicons from '@expo/vector-icons/Ionicons';\r\n import Entypo from '@expo/vector-icons/Entypo';\r\n import { fetchWeatherForecast, fetchLocations, fetchExtendedForecast } from '../../api/weather';\r\n-import { weatherImages } from '../../constants';\r\n+import { weatherImages } from '../components/constants';\r\n import * as Progress from 'react-native-progress';\r\n import * as Location from 'expo-location'; // For location services\r\n import MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\r\n import AsyncStorage from '@react-native-async-storage/async-storage'; // Import AsyncStorage\r\n import AntDesign from '@expo/vector-icons/AntDesign';\r\n import { LineChart } from 'react-native-chart-kit';\r\n import { ScatterChart } from 'react-native-chart-kit';\r\n-import { Colors } from '../../constants/Colors';\r\n+import { Colors } from '../components/constants/Colors';\r\n import { Card } from 'react-native-paper';\r\n import MapView, { Marker } from 'react-native-maps';\r\n import { UrlTile } from 'react-native-maps';\r\n-import { apiForecast, BASE_URL } from '../../constants/index';\r\n+import { apiForecast, BASE_URL } from '../components/constants/index';\r\n import { LinearGradient } from 'expo-linear-gradient';\r\n-import TemperatureText from '../../constants/TemperatureText';\r\n+import TemperatureText from '../components/constants/TemperatureText';\r\n \r\n import Icon from 'react-native-vector-icons/MaterialIcons'; // Sau alt set de iconițe\r\n \r\n \r\n@@ -231,11 +231,20 @@\n     } catch (error) {\r\n       console.error('Error loading last city:', error);\r\n     }\r\n   };\r\n-\r\n   useEffect(() => {\r\n-    loadLastCity(); // Load the last searched city when the component mounts\r\n+    const init = async () => {\r\n+      await loadLastCity();\r\n+      \r\n+      // Verifică dacă avem deja locație salvată\r\n+      const savedLocation = await AsyncStorage.getItem('lastCity');\r\n+      if (savedLocation?.includes(',')) {\r\n+        const [lat, lon] = savedLocation.split(',');\r\n+        setLocation({ lat: parseFloat(lat), lon: parseFloat(lon) });\r\n+      }\r\n+    };\r\n+    init();\r\n   }, []);\r\n \r\n   const current = weather?.current;\r\n   const locationData = weather?.location;\r\n"
                },
                {
                    "date": 1745761583855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,10 @@\n         longitude: coords.longitude\r\n       });\r\n       \r\n       const cityName = reverseGeocode[0]?.city || reverseGeocode[0]?.region || \"Locație curentă\";\r\n-      \r\n+      await AsyncStorage.setItem('lastCity', locationString);\r\n+\r\n       // Salvează în AsyncStorage sub două chei diferite\r\n       await AsyncStorage.multiSet([\r\n         ['lastCoordinates', locationString],\r\n         ['lastCityName', cityName]\r\n"
                },
                {
                    "date": 1745761590771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,11 +124,13 @@\n \r\n       // Salvează în AsyncStorage sub două chei diferite\r\n       await AsyncStorage.multiSet([\r\n         ['lastCoordinates', locationString],\r\n-        ['lastCityName', cityName]\r\n+        ['lastCityName', cityName],\r\n+        ['lastCity', locationString] // AICI adăugăm\r\n       ]);\r\n       \r\n+      \r\n       // Actualizează starea\r\n     setLocation({ lat: coords.latitude, lon: coords.longitude });\r\n       setSearchQuery(cityName);\r\n       \r\n"
                },
                {
                    "date": 1745761698325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,33 +209,38 @@\n   }, []);\r\n   // Load the last searched city from AsyncStorage\r\n   const loadLastCity = async () => {\r\n     try {\r\n-    const savedCity = await AsyncStorage.getItem('lastCity');\r\n-    if (savedCity) {\r\n-        // Verifică dacă salvarea conține coordonate GPS (format \"lat,lon\")\r\n+      const savedCity = await AsyncStorage.getItem('lastCity');\r\n+      if (savedCity) {\r\n         if (savedCity.includes(',')) {\r\n+          // Este format \"lat,lon\"\r\n           const [lat, lon] = savedCity.split(',');\r\n+          \r\n           const weatherData = await fetchWeatherForecast({\r\n-            cityName: savedCity,\r\n+            cityName: savedCity, // aici e ok să trimitem lat,lon la API\r\n             days: '7'\r\n           });\r\n+  \r\n           setWeather(weatherData);\r\n           setLocation({ lat: parseFloat(lat), lon: parseFloat(lon) });\r\n+          setSearchQuery(weatherData.location.name || \"Locație curentă\"); // folosim numele orașului din API\r\n+  \r\n         } else {\r\n-          // Este un nume de oraș normal\r\n-      await fetchWeatherData(savedCity);\r\n+          // Este un nume de oraș\r\n+          await fetchWeatherData(savedCity);\r\n+          setSearchQuery(savedCity);\r\n         }\r\n-      setSearchQuery(savedCity);\r\n-    } else {\r\n-        // Locație implicită dacă nu există salvări\r\n-      await fetchWeatherData('Bucuresti');\r\n-      setSearchQuery('Bucuresti');\r\n+      } else {\r\n+        // Locație implicită\r\n+        await fetchWeatherData('Bucuresti');\r\n+        setSearchQuery('Bucuresti');\r\n       }\r\n     } catch (error) {\r\n       console.error('Error loading last city:', error);\r\n     }\r\n   };\r\n+  \r\n   useEffect(() => {\r\n     const init = async () => {\r\n       await loadLastCity();\r\n       \r\n"
                },
                {
                    "date": 1745761785994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,44 +170,8 @@\n \r\n     await AsyncStorage.setItem('lastCity', city.name);\r\n   };\r\n \r\n-  const loadLastLocation = async () => {\r\n-    try {\r\n-      // Încarcă ambele valori salvate\r\n-      const [savedCoords, savedCity] = await AsyncStorage.multiGet([\r\n-        'lastCoordinates',\r\n-        'lastCityName'\r\n-      ]);\r\n-  \r\n-      // Prioritizează locația GPS dacă există\r\n-      if (savedCoords[1]) {\r\n-        const [lat, lon] = savedCoords[1].split(',');\r\n-        const weatherData = await fetchWeatherForecast({\r\n-          cityName: savedCoords[1],\r\n-          days: '7'\r\n-        });\r\n-        setWeather(weatherData);\r\n-        setLocation({ lat: parseFloat(lat), lon: parseFloat(lon) });\r\n-        setSearchQuery(savedCity[1] || \"Locație curentă\");\r\n-      } \r\n-      // Dacă nu există GPS, folosește ultimul oraș căutat\r\n-      else if (savedCity[1]) {\r\n-        await fetchWeatherData(savedCity[1]);\r\n-        setSearchQuery(savedCity[1]);\r\n-      } \r\n-      // Locație implicită\r\n-      else {\r\n-        await fetchWeatherData('București');\r\n-        setSearchQuery('București');\r\n-      }\r\n-    } catch (error) {\r\n-      console.error('Error loading last location:', error);\r\n-    }\r\n-  };\r\n-  useEffect(() => {\r\n-    loadLastLocation();\r\n-  }, []);\r\n   // Load the last searched city from AsyncStorage\r\n   const loadLastCity = async () => {\r\n     try {\r\n       const savedCity = await AsyncStorage.getItem('lastCity');\r\n"
                },
                {
                    "date": 1745761802384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,18 +206,12 @@\n   \r\n   useEffect(() => {\r\n     const init = async () => {\r\n       await loadLastCity();\r\n-      \r\n-      // Verifică dacă avem deja locație salvată\r\n-      const savedLocation = await AsyncStorage.getItem('lastCity');\r\n-      if (savedLocation?.includes(',')) {\r\n-        const [lat, lon] = savedLocation.split(',');\r\n-        setLocation({ lat: parseFloat(lat), lon: parseFloat(lon) });\r\n-      }\r\n     };\r\n     init();\r\n   }, []);\r\n+  \r\n \r\n   const current = weather?.current;\r\n   const locationData = weather?.location;\r\n   const getWeatherDataForSelectedDay = () => {\r\n"
                },
                {
                    "date": 1745761946349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,12 +204,9 @@\n     }\r\n   };\r\n   \r\n   useEffect(() => {\r\n-    const init = async () => {\r\n-      await loadLastCity();\r\n-    };\r\n-    init();\r\n+    loadLastCity();\r\n   }, []);\r\n   \r\n \r\n   const current = weather?.current;\r\n"
                },
                {
                    "date": 1745762163369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,38 +173,37 @@\n \r\n   // Load the last searched city from AsyncStorage\r\n   const loadLastCity = async () => {\r\n     try {\r\n+      setLoading(true); // <- adaugă aici\r\n       const savedCity = await AsyncStorage.getItem('lastCity');\r\n       if (savedCity) {\r\n         if (savedCity.includes(',')) {\r\n-          // Este format \"lat,lon\"\r\n           const [lat, lon] = savedCity.split(',');\r\n-          \r\n           const weatherData = await fetchWeatherForecast({\r\n-            cityName: savedCity, // aici e ok să trimitem lat,lon la API\r\n+            cityName: savedCity,\r\n             days: '7'\r\n           });\r\n   \r\n           setWeather(weatherData);\r\n           setLocation({ lat: parseFloat(lat), lon: parseFloat(lon) });\r\n-          setSearchQuery(weatherData.location.name || \"Locație curentă\"); // folosim numele orașului din API\r\n-  \r\n+          setSearchQuery(weatherData.location.name || \"Locație curentă\");\r\n         } else {\r\n-          // Este un nume de oraș\r\n           await fetchWeatherData(savedCity);\r\n           setSearchQuery(savedCity);\r\n         }\r\n       } else {\r\n-        // Locație implicită\r\n         await fetchWeatherData('Bucuresti');\r\n         setSearchQuery('Bucuresti');\r\n       }\r\n     } catch (error) {\r\n       console.error('Error loading last city:', error);\r\n+    } finally {\r\n+      setLoading(false); // <- și aici\r\n     }\r\n   };\r\n   \r\n+  \r\n   useEffect(() => {\r\n     loadLastCity();\r\n   }, []);\r\n   \r\n"
                },
                {
                    "date": 1745762315575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,23 +2,23 @@\n import { View, Text, Dimensions,Modal, TextInput, TouchableOpacity, Image, SafeAreaView, ScrollView, StatusBar, StyleSheet } from 'react-native';\r\n import Ionicons from '@expo/vector-icons/Ionicons';\r\n import Entypo from '@expo/vector-icons/Entypo';\r\n import { fetchWeatherForecast, fetchLocations, fetchExtendedForecast } from '../../api/weather';\r\n-import { weatherImages } from '../components/constants';\r\n+import { weatherImages } from '../constants';\r\n import * as Progress from 'react-native-progress';\r\n import * as Location from 'expo-location'; // For location services\r\n import MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\r\n import AsyncStorage from '@react-native-async-storage/async-storage'; // Import AsyncStorage\r\n import AntDesign from '@expo/vector-icons/AntDesign';\r\n import { LineChart } from 'react-native-chart-kit';\r\n import { ScatterChart } from 'react-native-chart-kit';\r\n-import { Colors } from '../components/constants/Colors';\r\n+import { Colors } from '../constants/Colors';\r\n import { Card } from 'react-native-paper';\r\n import MapView, { Marker } from 'react-native-maps';\r\n import { UrlTile } from 'react-native-maps';\r\n-import { apiForecast, BASE_URL } from '../components/constants/index';\r\n+import { apiForecast, BASE_URL } from '../constants/index';\r\n import { LinearGradient } from 'expo-linear-gradient';\r\n-import TemperatureText from '../components/constants/TemperatureText';\r\n+import TemperatureText from '../constants/TemperatureText';\r\n \r\n import Icon from 'react-native-vector-icons/MaterialIcons'; // Sau alt set de iconițe\r\n \r\n \r\n"
                },
                {
                    "date": 1745762731186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,33 +310,33 @@\n         start={{ x: 0.1, y: 0.1 }}\r\n         end={{ x: 0.9, y: 0.9 }}\r\n         angle={45}\r\n       >\r\n-        <StatusBar style=\"light\" />\r\n-        <View style={styles.searchContainer}>\r\n-          <View style={styles.searchBar}>\r\n-            <TextInput\r\n-              placeholder=\"Search city\"\r\n-              placeholderTextColor=\"#888\"\r\n-              style={styles.searchInput}\r\n-              onChangeText={handleSearch}\r\n-              value={searchQuery}\r\n-            />\r\n-            <TouchableOpacity style={styles.searchButton}>\r\n-              <Ionicons name=\"search\" size={20} color=\"#333\" />\r\n-            </TouchableOpacity>\r\n-          </View>\r\n-          {locations.length > 0 && (\r\n-            <View style={styles.locationDropdown}>\r\n-              {locations.map((loc, index) => (\r\n+          <StatusBar style=\"light\" />\r\n+          <View style={styles.searchContainer}>\r\n+            <View style={styles.searchBar}>\r\n+              <TextInput\r\n+                placeholder=\"Search city\"\r\n+                placeholderTextColor=\"#888\"\r\n+                style={styles.searchInput}\r\n+                onChangeText={handleSearch}\r\n+                value={searchQuery}\r\n+              />\r\n+              <TouchableOpacity style={styles.searchButton}>\r\n+                <Ionicons name=\"search\" size={20} color=\"#333\" />\r\n+              </TouchableOpacity>\r\n+            </View>\r\n+            {locations.length > 0 && (\r\n+              <View style={styles.locationDropdown}>\r\n+                {locations.map((loc, index) => (\r\n \r\n-                <TouchableOpacity key={index} style={styles.locationItem} onPress={() => handleCitySelect(loc)}>\r\n-                  <Ionicons name=\"location\" size={20} color=\"black\" style={styles.locationIcon} />\r\n-                  <Text style={[dynamicStyles.text, styles.locationText]}>{loc?.name}, {loc?.country}</Text>\r\n-                </TouchableOpacity>\r\n-              ))}\r\n-            </View>\r\n-          )}\r\n+                  <TouchableOpacity key={index} style={styles.locationItem} onPress={() => handleCitySelect(loc)}>\r\n+                    <Ionicons name=\"location\" size={20} color=\"black\" style={styles.locationIcon} />\r\n+                    <Text style={[dynamicStyles.text, styles.locationText]}>{loc?.name}, {loc?.country}</Text>\r\n+                  </TouchableOpacity>\r\n+                ))}\r\n+              </View>\r\n+            )}\r\n         </View>\r\n \r\n         {/* Day Selector Buttons */}\r\n         {/* Day Selector Buttons with Location Button */}\r\n"
                },
                {
                    "date": 1745762879612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n \r\n   // Load the last searched city from AsyncStorage\r\n   const loadLastCity = async () => {\r\n     try {\r\n-      setLoading(true); // <- adaugă aici\r\n+      setLoading(true);\r\n       const savedCity = await AsyncStorage.getItem('lastCity');\r\n       if (savedCity) {\r\n         if (savedCity.includes(',')) {\r\n           const [lat, lon] = savedCity.split(',');\r\n@@ -186,8 +186,12 @@\n   \r\n           setWeather(weatherData);\r\n           setLocation({ lat: parseFloat(lat), lon: parseFloat(lon) });\r\n           setSearchQuery(weatherData.location.name || \"Locație curentă\");\r\n+  \r\n+          // 👇 ADĂUGĂM ȘI AICI să aduci prognoza extinsă!\r\n+          await fetchExtendedForecastData(lat, lon);\r\n+  \r\n         } else {\r\n           await fetchWeatherData(savedCity);\r\n           setSearchQuery(savedCity);\r\n         }\r\n@@ -197,9 +201,9 @@\n       }\r\n     } catch (error) {\r\n       console.error('Error loading last city:', error);\r\n     } finally {\r\n-      setLoading(false); // <- și aici\r\n+      setLoading(false);\r\n     }\r\n   };\r\n   \r\n   \r\n"
                },
                {
                    "date": 1745763005569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -324,11 +324,20 @@\n                 style={styles.searchInput}\r\n                 onChangeText={handleSearch}\r\n                 value={searchQuery}\r\n               />\r\n-              <TouchableOpacity style={styles.searchButton}>\r\n-                <Ionicons name=\"search\" size={20} color=\"#333\" />\r\n-              </TouchableOpacity>\r\n+             <TouchableOpacity \r\n+  style={styles.searchButton}\r\n+  onPress={() => {\r\n+    if (searchQuery.trim()) { // verificăm să nu fie gol\r\n+      fetchWeatherData(searchQuery);\r\n+      setLocations([]); // ascundem lista de sugestii\r\n+    }\r\n+  }}\r\n+>\r\n+  <Ionicons name=\"search\" size={20} color=\"#333\" />\r\n+</TouchableOpacity>\r\n+\r\n             </View>\r\n             {locations.length > 0 && (\r\n               <View style={styles.locationDropdown}>\r\n                 {locations.map((loc, index) => (\r\n"
                },
                {
                    "date": 1745763029565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -317,27 +317,34 @@\n       >\r\n           <StatusBar style=\"light\" />\r\n           <View style={styles.searchContainer}>\r\n             <View style={styles.searchBar}>\r\n-              <TextInput\r\n-                placeholder=\"Search city\"\r\n-                placeholderTextColor=\"#888\"\r\n-                style={styles.searchInput}\r\n-                onChangeText={handleSearch}\r\n-                value={searchQuery}\r\n-              />\r\n-             <TouchableOpacity \r\n-  style={styles.searchButton}\r\n-  onPress={() => {\r\n-    if (searchQuery.trim()) { // verificăm să nu fie gol\r\n+            <TextInput\r\n+  placeholder=\"Search city\"\r\n+  placeholderTextColor=\"#888\"\r\n+  style={styles.searchInput}\r\n+  onChangeText={handleSearch}\r\n+  value={searchQuery}\r\n+  onSubmitEditing={() => {\r\n+    if (searchQuery.trim()) {\r\n       fetchWeatherData(searchQuery);\r\n-      setLocations([]); // ascundem lista de sugestii\r\n+      setLocations([]);\r\n     }\r\n   }}\r\n->\r\n-  <Ionicons name=\"search\" size={20} color=\"#333\" />\r\n-</TouchableOpacity>\r\n+/>\r\n \r\n+             <TouchableOpacity \r\n+              style={styles.searchButton}\r\n+              onPress={() => {\r\n+                if (searchQuery.trim()) { // verificăm să nu fie gol\r\n+                  fetchWeatherData(searchQuery);\r\n+                  setLocations([]); // ascundem lista de sugestii\r\n+                }\r\n+              }}\r\n+            >\r\n+              <Ionicons name=\"search\" size={20} color=\"#333\" />\r\n+            </TouchableOpacity>\r\n+\r\n             </View>\r\n             {locations.length > 0 && (\r\n               <View style={styles.locationDropdown}>\r\n                 {locations.map((loc, index) => (\r\n"
                }
            ],
            "date": 1745760835019,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\r\nimport { View, Text, Dimensions,Modal, TextInput, TouchableOpacity, Image, SafeAreaView, ScrollView, StatusBar, StyleSheet } from 'react-native';\r\nimport Ionicons from '@expo/vector-icons/Ionicons';\r\nimport Entypo from '@expo/vector-icons/Entypo';\r\nimport { fetchWeatherForecast, fetchLocations, fetchExtendedForecast } from '../../api/weather';\r\nimport { weatherImages } from '../../constants';\r\nimport * as Progress from 'react-native-progress';\r\nimport * as Location from 'expo-location'; // For location services\r\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage'; // Import AsyncStorage\r\nimport AntDesign from '@expo/vector-icons/AntDesign';\r\nimport { LineChart } from 'react-native-chart-kit';\r\nimport { ScatterChart } from 'react-native-chart-kit';\r\nimport { Colors } from '../../constants/Colors';\r\nimport { Card } from 'react-native-paper';\r\nimport MapView, { Marker } from 'react-native-maps';\r\nimport { UrlTile } from 'react-native-maps';\r\nimport { apiForecast, BASE_URL } from '../../constants/index';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport TemperatureText from '../../constants/TemperatureText';\r\n\r\nimport Icon from 'react-native-vector-icons/MaterialIcons'; // Sau alt set de iconițe\r\n\r\n\r\nconst getDynamicStyles = (tempC) => StyleSheet.create({\r\n  text: {\r\n    color: tempC > 10 ? 'rgba(31, 31, 31, 0.82)' : 'rgba(255,255,255,0.9)',\r\n  }\r\n});\r\n\r\n\r\n\r\nconst WeatherComponent = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [weather, setWeather] = useState({});\r\n  const [location, setLocation] = useState(null);\r\n  const [showSearch, toggleSearch] = useState(false);\r\n  const [locations, setLocations] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  // const [hourlyData, setHourlyData] = useState([]);\r\n  const [selectedDay, setSelectedDay] = useState('TODAY'); // Default to TODAY\r\n  const [selectedForecast, setSelectedForecast] = useState(null);\r\n  const [forecast, setForecast] = useState([]);\r\n  const daysOfWeek = [\"Duminică\", \"Luni\", \"Marți\", \"Miercuri\", \"Joi\", \"Vineri\", \"Sâmbătă\"];\r\n\r\n  const fetchExtendedForecastData = async (lat, lon) => {\r\n    try {\r\n      setLoading(true);\r\n      const data = await fetchExtendedForecast({ lat, lon });\r\n      // console.log('Prognoza extinsă:', data);\r\n\r\n      setForecast(data.list);\r\n\r\n      // Assuming the data has a list field for extended forecast\r\n    } catch (err) {\r\n      console.error(\"Error fetching extended forecast:\", err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchWeatherData = async (cityName) => {\r\n    setLoading(true);\r\n    try {\r\n      // Fetch weather forecast\r\n      const weatherData = await fetchWeatherForecast({ cityName });\r\n\r\n      if (!weatherData) {\r\n        throw new Error(\"Nu s-au primit date valide despre vreme.\");\r\n      }\r\n\r\n      // console.log('Răspuns API:', weatherData);\r\n\r\n      // Extrage datele necesare\r\n      const locationData = weatherData?.location;\r\n      const lat = locationData?.lat;\r\n      const lon = locationData?.lon;\r\n\r\n      const todayForecast = weatherData?.forecast?.forecastday?.[0]?.day;\r\n      const tomorrowForecast = weatherData?.forecast?.forecastday?.[1]?.day;\r\n      const hourlyTomorrow = weatherData?.forecast?.forecastday?.[1]?.hour;\r\n\r\n      // Dacă nu avem coordonatele din weatherData, încercăm fetchLocations\r\n      if (!lat || !lon) {\r\n        const locationResults = await fetchLocations({ cityName });\r\n\r\n        if (locationResults.length === 0) {\r\n          throw new Error(\"Nu s-au găsit locații pentru acest oraș.\");\r\n        }\r\n\r\n        const city = locationResults[0];\r\n        fetchExtendedForecastData(city.lat, city.lon);\r\n      } else {\r\n        fetchExtendedForecastData(lat, lon);\r\n      }\r\n\r\n      setWeather(weatherData);\r\n    } catch (error) {\r\n      console.error('Eroare la preluarea datelor:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n\r\n  const handleLocationButtonPress = async () => {\r\n    let { status } = await Location.requestForegroundPermissionsAsync();\r\n    if (status !== 'granted') {\r\n      console.log('Permission to access location was denied');\r\n      return;\r\n    }\r\n\r\n    const { coords } = await Location.getCurrentPositionAsync({});\r\n    setLocation({ lat: coords.latitude, lon: coords.longitude });\r\n      const weatherData = await fetchWeatherForecast({\r\n        cityName: locationString,\r\n        days: '7'\r\n      });\r\n      setWeather(weatherData);\r\n  \r\n      // Actualizează searchQuery cu numele orașului (dacă este disponibil)\r\n      const reverseGeocode = await Location.reverseGeocodeAsync({\r\n        latitude: coords.latitude,\r\n        longitude: coords.longitude\r\n      });\r\n      if (reverseGeocode[0]?.city) {\r\n        setSearchQuery(reverseGeocode[0].city);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error getting location:', error);\r\n    }\r\n  };\r\n\r\n  const handleSearch = async (text) => {\r\n    setSearchQuery(text);\r\n    if (text) {\r\n      try {\r\n        const locationData = await fetchLocations({ cityName: text });\r\n        setLocations(locationData || []);\r\n      } catch (error) {\r\n        console.error('Error fetching locations:', error);\r\n      }\r\n    } else {\r\n      setLocations([]);\r\n    }\r\n  };\r\n\r\n\r\n  const handleCitySelect = async (city) => {\r\n    await fetchWeatherData(city.name);\r\n    setLocations([]);\r\n    setSearchQuery(city.name);\r\n\r\n\r\n    await AsyncStorage.setItem('lastCity', city.name);\r\n  };\r\n\r\n  // Load the last searched city from AsyncStorage\r\n  const loadLastCity = async () => {\r\n    const savedCity = await AsyncStorage.getItem('lastCity');\r\n    if (savedCity) {\r\n      await fetchWeatherData(savedCity);\r\n      setSearchQuery(savedCity);\r\n    } else {\r\n\r\n      await fetchWeatherData('Bucuresti');\r\n      setSearchQuery('Bucuresti');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadLastCity(); // Load the last searched city when the component mounts\r\n  }, []);\r\n\r\n  const current = weather?.current;\r\n  const locationData = weather?.location;\r\n  const getWeatherDataForSelectedDay = () => {\r\n    if (selectedDay === 'TODAY') {\r\n      return weather?.forecast?.forecastday?.[0];\r\n    } else if (selectedDay === 'TOMORROW') {\r\n      return weather?.forecast?.forecastday?.[1];\r\n    }\r\n    return null; // Pentru FORECAST, gestionăm separat\r\n  };\r\n\r\n\r\n  // grafic vreme \r\n\r\n  const hourlyData = weather?.forecast?.forecastday[0]?.hour || [];\r\n\r\n  const hourlyDataTomorrow = weather?.forecast?.forecastday[1]?.hour || [];\r\n  // Extragem orele și temperaturile pentru axele graficului\r\n  const labels = hourlyData.map((hour) => {\r\n    const date = new Date(hour.time);\r\n    return `${date.getHours()}`; // Afișăm orele\r\n  });\r\n\r\n  const temperatures = hourlyData.map((hour) => hour.temp_c); // Temperatura pe ore\r\n  const temperaturesTomorrow = hourlyDataTomorrow.map((hour) => hour.temp_c);\r\n\r\n  const chartConfig = {\r\n    backgroundColor: 'transparent',\r\n    backgroundGradientFrom: 'transparent',\r\n    backgroundGradientTo: 'transparent',\r\n    hasBackgroundShadow: false, \r\n    decimalPlaces: 0,\r\n    color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\r\n    labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\r\n    fillShadowGradient: '#000000',\r\n    fillShadowGradientOpacity: 0.2,\r\n    strokeWidth: 2,\r\n    useShadowColorFromDataset: false,\r\n    propsForBackgroundLines: {\r\n      strokeWidth: 0.5,\r\n      stroke: 'rgba(255, 255, 255, 0.1)',\r\n    },\r\n    propsForDots: {\r\n      r: '5',\r\n      strokeWidth: '1.5',\r\n      stroke: '#ffffff',\r\n      fill: 'rgba(255, 255, 255, 0.79)',\r\n    },\r\n  };\r\n  \r\n  const weatherCondition = weather?.forecast?.forecastday[1]?.day?.condition?.text?.trim(); // Elimină spațiile\r\n  console.log('stare:', weatherCondition);\r\n\r\n  // Verifică dacă există în obiect, altfel folosește 'other'\r\n  const imageSource = weatherImages[weatherCondition] || weatherImages['other'];\r\n\r\n  console.log('Imagine:', imageSource);\r\n  const getTemperatureColors = (tempC) => {\r\n    // Definim paleta de culori cu transparență ajustabilă\r\n    const colorPalettes = {\r\n      hot: [\r\n        'rgba(255, 81, 47, 0.9)',    // Roșu portocaliu\r\n        'rgba(240, 152, 25, 0.85)',   // Portocaliu\r\n        'rgba(255, 126, 95, 0.8)'     // Coral deschis\r\n      ],\r\n      warm: [\r\n        'rgba(158, 223, 156, 0.9)',   // Verde mentă\r\n        'rgba(194, 255, 199, 0.85)',  // Verde pastel\r\n        'rgba(248, 245, 233, 0.95)'   // Crem\r\n      ],\r\n      cool: [\r\n        'rgba(98, 130, 93, 0.9)',     // Verde închis\r\n        'rgba(126, 179, 179, 0.85)',  // Bleumarin\r\n        'rgba(224, 247, 250, 0.8)'    // Albastru gheață\r\n      ],\r\n      cold: [\r\n        'rgba(15, 32, 39, 0.95)',     // Albastru petrol\r\n        'rgba(32, 58, 67, 0.9)',      // Albastru arctic\r\n        'rgba(44, 83, 100, 0.85)'     // Albastru storm\r\n      ]\r\n    };\r\n\r\n    if (tempC >= 30) return colorPalettes.hot;\r\n    if (tempC >= 20) return colorPalettes.warm;\r\n    if (tempC >= 10) return colorPalettes.cool;\r\n    return colorPalettes.cold;\r\n  };\r\n\r\n  const dynamicStyles = getDynamicStyles(current?.temp_c);\r\n\r\n  return (\r\n\r\n\r\n    <View style={styles.container}>\r\n    \r\n      <LinearGradient\r\n        colors={getTemperatureColors(current?.temp_c)}\r\n        locations={[0.1, 0.5, 0.9]} // Control fin al distribuției culorilor\r\n        style={styles.container}\r\n        start={{ x: 0.1, y: 0.1 }}\r\n        end={{ x: 0.9, y: 0.9 }}\r\n        angle={45}\r\n      >\r\n        <StatusBar style=\"light\" />\r\n        <View style={styles.searchContainer}>\r\n          <View style={styles.searchBar}>\r\n            <TextInput\r\n              placeholder=\"Search city\"\r\n              placeholderTextColor=\"#888\"\r\n              style={styles.searchInput}\r\n              onChangeText={handleSearch}\r\n              value={searchQuery}\r\n            />\r\n            <TouchableOpacity style={styles.searchButton}>\r\n              <Ionicons name=\"search\" size={20} color=\"#333\" />\r\n            </TouchableOpacity>\r\n          </View>\r\n          {locations.length > 0 && (\r\n            <View style={styles.locationDropdown}>\r\n              {locations.map((loc, index) => (\r\n\r\n                <TouchableOpacity key={index} style={styles.locationItem} onPress={() => handleCitySelect(loc)}>\r\n                  <Ionicons name=\"location\" size={20} color=\"black\" style={styles.locationIcon} />\r\n                  <Text style={[dynamicStyles.text, styles.locationText]}>{loc?.name}, {loc?.country}</Text>\r\n                </TouchableOpacity>\r\n              ))}\r\n            </View>\r\n          )}\r\n        </View>\r\n\r\n        {/* Day Selector Buttons */}\r\n        {/* Day Selector Buttons with Location Button */}\r\n        <View style={styles.daySelectorContainer}>\r\n          <View style={styles.daySelector}>\r\n            <TouchableOpacity\r\n              onPress={() => setSelectedDay('TODAY')}\r\n              style={[\r\n                styles.dayButton,\r\n                selectedDay === 'TODAY' && styles.dayButtonActive\r\n              ]}\r\n            >\r\n              <Text style={[dynamicStyles.text, styles.dayButtonText]}>TODAY</Text>\r\n            </TouchableOpacity>\r\n\r\n            <TouchableOpacity\r\n              onPress={() => setSelectedDay('TOMORROW')}\r\n              style={[\r\n                styles.dayButton,\r\n                selectedDay === 'TOMORROW' && styles.dayButtonActive\r\n              ]}\r\n            >\r\n              <Text style={[dynamicStyles.text, styles.dayButtonText]}>TOMORROW</Text>\r\n            </TouchableOpacity>\r\n\r\n            <TouchableOpacity\r\n              onPress={() => setSelectedDay('FORECAST')}\r\n              style={[\r\n                styles.dayButton,\r\n                selectedDay === 'FORECAST' && styles.dayButtonActive\r\n              ]}\r\n            >\r\n              <Text style={[dynamicStyles.text, styles.dayButtonText]}>FORECAST</Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n\r\n          {/* Location Button now inside the same container */}\r\n          <TouchableOpacity\r\n            onPress={handleLocationButtonPress}\r\n            style={styles.locationButton}\r\n          >\r\n            <Entypo name=\"location\" size={20} color=\"white\" />\r\n          </TouchableOpacity>\r\n        </View>\r\n\r\n\r\n\r\n        {/* Vizualizarea conținutului în funcție de ziua selectată */}\r\n        <View style={{ marginTop: 40 }}>\r\n          {selectedDay === 'TODAY' && (\r\n            //---------------------------------------------------------------------------\r\n            //----------------T O D A Y------------------------------\r\n            //-----------------------------------------------------------------------------\r\n\r\n            <View>\r\n              {/* Weather Info */}\r\n              {loading ? (\r\n                <View style={styles.loadingContainer}>\r\n                  <Progress.CircleSnail thickness={10} size={140} color=\"#0bb3b2\" />\r\n                </View>\r\n              ) : (\r\n\r\n                <ScrollView style={{ marginHorizontal: 16, marginTop: -40 }}>\r\n                  {/* Location Info */}\r\n                  <Text style={[dynamicStyles.text, { fontSize: 24, fontWeight: 'bold', textAlign: 'left', marginBottom: 10 }]}>\r\n                    {locationData?.name}, <Text style={[{ fontSize: 18, fontWeight: '600', color: '#aaa' }]}>{locationData?.region},{locationData?.country}</Text>\r\n                  </Text>\r\n                  <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'flex-start', paddingHorizontal: 20 }}>\r\n                    {/* Left side - Weather icon and info */}\r\n                    <View style={{ flex: 1,marginBottom:20}}>\r\n                      {/* Weather icon and condition */}\r\n                      <View style={{ alignItems: 'left'}}>\r\n                        <Image\r\n                          style={styles.weatherImage}\r\n                          source={weatherImages[weather?.forecast?.forecastday[0]?.condition?.text.trim()] || { uri: `https:${current?.condition?.icon}` }}\r\n                        />\r\n                      </View>\r\n                    </View>\r\n\r\n                    {/* Right side - Temperature */}\r\n                    <View style={{ alignItems: 'flex-end',marginTop:3 }}>\r\n                      <Text style={[dynamicStyles.text, { fontSize: 64, fontWeight: '200', }]}>\r\n                        {current?.temp_c}°\r\n                      </Text>\r\n                      <Text style={[dynamicStyles.text, { fontSize: 16, marginTop: -10 }]}>\r\n                        Se simt ca {current?.feelslike_c}°\r\n                      </Text>\r\n                    </View>\r\n                  </View>\r\n\r\n                  {/* Condiție vreme */}\r\n                  <View style={{ marginTop: -25 }}>\r\n                    <Text style={[dynamicStyles.text, styles.weatherConditionText]}>\r\n                      {current?.condition?.text}\r\n                    </Text>\r\n\r\n                    {/* Minima și maxima */}\r\n                    <Text style={[dynamicStyles.text, styles.tempRangeText]}>\r\n                      Min: {weather?.forecast?.forecastday[0]?.day?.mintemp_c}° | Max: {weather?.forecast?.forecastday[0]?.day?.maxtemp_c}°\r\n                    </Text>\r\n                  </View>\r\n\r\n                  {/* Weather AlertE AZI */}\r\n                  {weather?.alerts?.alert && weather.alerts.alert.length > 0 ? (\r\n                    <View style={styles.alertContainer}>\r\n                      <Text style={[dynamicStyles.text, styles.alertTitle]}>Alerte meteo:</Text>\r\n                      <View style={styles.alertItem}>\r\n                        <Text style={[dynamicStyles.text, styles.alertHeadline]}>{weather.alerts.alert[0].headline}</Text>\r\n                        <Text style={[dynamicStyles.text, styles.alertDescription]}>{weather.alerts.alert[0].desc}</Text>\r\n                        <Text style={[dynamicStyles.text, styles.alertTime]}>\r\n                          Valabil de la:{' '}\r\n                          {new Date(weather.alerts.alert[0].effective).toLocaleDateString('ro-RO', {\r\n                            year: 'numeric',\r\n                            month: 'long',\r\n                            day: 'numeric',\r\n                          })}{' '}\r\n                          ora: {new Date(weather.alerts.alert[0].effective).toLocaleTimeString('ro-RO', {\r\n                            hour: '2-digit',\r\n                            minute: '2-digit',\r\n                          })}\r\n                          {'\\n'}\r\n                          Până la:{' '}\r\n                          {new Date(weather.alerts.alert[0].expires).toLocaleDateString('ro-RO', {\r\n                            year: 'numeric',\r\n                            month: 'long',\r\n                            day: 'numeric',\r\n                          })}\r\n                          {' '}ora: {new Date(weather.alerts.alert[0].expires).toLocaleTimeString('ro-RO', {\r\n                            hour: '2-digit',\r\n                            minute: '2-digit',\r\n                          })}\r\n                        </Text>\r\n                      </View>\r\n\r\n                    </View>\r\n                  ) : (\r\n                    <View style={styles.noAlertContainer}>\r\n                      <Text style={[dynamicStyles.text, styles.noAlertText]}>NO WEATHER ALERTS</Text>\r\n                    </View>\r\n                  )}\r\n\r\n                  {/* Hourly Temp &precip for Today */}\r\n                  <View style={{ marginTop: -5 }}>\r\n                    <Text style={[dynamicStyles.text, styles.sectionTitle]}>Vremea pe ore astăzi</Text>\r\n                    <ScrollView\r\n                      horizontal\r\n                      showsHorizontalScrollIndicator={false}\r\n                      contentContainerStyle={{ paddingHorizontal: 10 }}\r\n                    >\r\n                      {weather?.forecast?.forecastday[0]?.hour.map((hour, index) => (\r\n                        <View\r\n                          key={index}\r\n                          style={styles.hourlyItem}\r\n                        >\r\n                          <Text style={[styles.hourlyTime, dynamicStyles.text]}>\r\n                            {new Date(hour.time).getHours()}:00\r\n                          </Text>\r\n                          <Image\r\n                            source={{ uri: `https:${hour.condition.icon}` }}\r\n                            style={styles.hourlyIcon}\r\n                          />\r\n                          <Text style={[styles.hourlyTemp, dynamicStyles.text]}>{Math.round(hour.temp_c)}°C</Text>\r\n                          <View style={styles.precipitationContainer}>\r\n                            <Text style={[styles.precipitationLabel, dynamicStyles.text]}>Precipitații</Text>\r\n                            <Text style={[styles.precipitationValue, dynamicStyles.text]}>{hour.precip_mm} mm</Text>\r\n                          </View>\r\n                        </View>\r\n                      ))}\r\n                    </ScrollView>\r\n                  </View>\r\n\r\n                  {/* Weather Stats Grid */}\r\n                  <View style={styles.statsGrid}>\r\n                    {/* Row 1 */}\r\n                    <View style={styles.statItem}>\r\n                      <Image source={require('../../assets/icons/wind.png')} style={[\r\n                        styles.statIcon,\r\n                        {\r\n                          tintColor: current?.temp_c > 10 ? 'rgba(38, 37, 37, 0.8)' : 'rgba(255, 255, 255, 0.9)'\r\n                        }\r\n                      ]} />\r\n                      <Text style={[styles.statLabel, dynamicStyles.text]}>Wind Speed</Text>\r\n                      <Text style={[styles.statValue, dynamicStyles.text]}>{current?.wind_kph} km/h</Text>\r\n                    </View>\r\n\r\n                    <View style={styles.statItem}>\r\n                      <Image source={require('../../assets/icons/drop.png')} style={[\r\n                        styles.statIcon,\r\n                        {\r\n                          tintColor: current?.temp_c > 10 ? 'rgba(0,0,0,0.8)' : 'rgba(255,255,255,0.9)'\r\n                        }\r\n                      ]} />\r\n                      <Text style={[styles.statLabel, dynamicStyles.text]}>Humidity</Text>\r\n                      <Text style={[styles.statValue, dynamicStyles.text]}>{current?.humidity}%</Text>\r\n                    </View>\r\n\r\n                    {/* Row 2 */}\r\n                    <View style={styles.statItem}>\r\n                    <Image source={require('../../assets/icons/uv.png')} style={[\r\n                        styles.statIcon,\r\n                        {\r\n                          tintColor: current?.temp_c > 10 ? 'rgba(0,0,0,0.8)' : 'rgba(255,255,255,0.9)'\r\n                        }\r\n                      ]} size={24} />\r\n                      <Text style={[styles.statLabel, dynamicStyles.text]}>UV Index</Text>\r\n                      <Text style={[styles.statValue, dynamicStyles.text]}>{weather?.current?.uv}</Text>\r\n                    </View>\r\n\r\n                    <View style={styles.statItem}>\r\n                    <Image source={require('../../assets/icons/cloud.png')} size={24} style={[\r\n                        styles.statIcon,\r\n                        {\r\n                          tintColor: current?.temp_c > 10 ? 'rgba(0,0,0,0.8)' : 'rgba(255,255,255,0.9)'\r\n                        }\r\n                      ]} />\r\n                      <Text style={[styles.statLabel, dynamicStyles.text]}>Cloud Cover</Text>\r\n                      <Text style={[styles.statValue, dynamicStyles.text]}>{weather?.current?.cloud}%</Text>\r\n                    </View>\r\n\r\n                    {/* Row 3 */}\r\n                    <View style={styles.statItem}>\r\n                      <Image source={require('../../assets/icons/pressure.png')} style={[\r\n                        styles.statIcon,\r\n                        {\r\n                          tintColor: current?.temp_c > 10 ? 'rgba(0,0,0,0.8)' : 'rgba(255,255,255,0.9)'\r\n                        }\r\n                      ]} />\r\n                      <Text style={[styles.statLabel, dynamicStyles.text]}>Pressure</Text>\r\n                      <Text style={[styles.statValue, dynamicStyles.text]}>{current?.pressure_mb} mb</Text>\r\n                    </View>\r\n\r\n                    <View style={styles.statItem}>\r\n                    <Image source={require('../../assets/icons/snow.png')} style={[\r\n                        styles.statIcon,\r\n                        {\r\n                          tintColor: current?.temp_c > 10 ? 'rgba(0,0,0,0.8)' : 'rgba(255,255,255,0.9)'\r\n                        }\r\n                      ]} size={24} />\r\n                      <Text style={[styles.statLabel, dynamicStyles.text]}>Snow Chance</Text>\r\n                      <Text style={[styles.statValue, dynamicStyles.text]}>\r\n                        {weather?.forecast?.forecastday?.[1]?.day?.daily_chance_of_snow || 0}%\r\n                      </Text>\r\n                    </View>\r\n\r\n                    {/* Sunrise/Sunset */}\r\n                    <View style={[styles.sunTimeContainer]}>\r\n                      <View style={styles.sunTimeItem}>\r\n                        <Image source={require('../../assets/icons/sun.png')} style={[\r\n                          styles.statIcon,\r\n                          {\r\n                            tintColor: current?.temp_c > 10 ? 'rgba(0,0,0,0.8)' : 'rgba(255,255,255,0.9)'\r\n                          }\r\n                        ]} />\r\n                        <Text style={[dynamicStyles.text, styles.sunTimeLabel]}>Sunrise</Text>\r\n                        <Text style={[dynamicStyles.text, styles.sunTimeValue]}>\r\n                          {weather?.forecast?.forecastday[0]?.astro?.sunrise}\r\n                        </Text>\r\n                      </View>\r\n\r\n                      <View style={styles.sunTimeItem}>\r\n                        <Image source={require('../../assets/icons/moon.png')} style={[\r\n                          styles.statIcon,\r\n                          {\r\n                            tintColor: current?.temp_c > 10 ? 'rgba(0,0,0,0.8)' : 'rgba(255,255,255,0.9)'\r\n                          }\r\n                        ]} />\r\n                        <Text style={[dynamicStyles.text, styles.sunTimeLabel]}>Sunset</Text>\r\n                        <Text style={[dynamicStyles.text, styles.sunTimeValue]}>\r\n                          {weather?.forecast?.forecastday[0]?.astro?.sunset}\r\n                        </Text>\r\n                      </View>\r\n                    </View>\r\n                  </View>\r\n\r\n\r\n                  <Card style={styles.mapCard}>\r\n                    <MapView\r\n                      style={styles.map}\r\n                      region={{\r\n                        latitude: weather?.location?.lat || 44.4268,\r\n                        longitude: weather?.location?.lon || 26.1025,\r\n                        latitudeDelta: 0.5,\r\n                        longitudeDelta: 0.5,\r\n                      }}\r\n                    >\r\n                      {location && (\r\n                        <Marker\r\n                          coordinate={{\r\n                            latitude: weather?.location?.lat,\r\n                            longitude: weather?.location?.lon,\r\n                          }}\r\n                        />\r\n                      )}\r\n\r\n                      {/* Precipitații */}\r\n                      <UrlTile\r\n                        urlTemplate={`${BASE_URL}/precipitation_new/{z}/{x}/{y}.png?appid=${apiForecast}&lat=${weather?.location?.lat || 44.4268}&lon=${weather?.location?.lon || 26.1025}`}\r\n                        maximumZ={19}\r\n                        flipY={false}\r\n                        style={{ opacity: 0.9 }}\r\n                      />\r\n\r\n                      {/* Nori */}\r\n                      <UrlTile\r\n                        urlTemplate={`${BASE_URL}/precipitation_new/{z}/{x}/{y}.png?appid=${apiForecast}&lat=${weather?.location?.lat || 44.4268}&lon=${weather?.location?.lon || 26.1025}`}\r\n                        maximumZ={19}\r\n                        flipY={false}\r\n                        style={{ opacity: 0.9 }}\r\n                      />\r\n\r\n                    </MapView>\r\n                  </Card>\r\n\r\n                  {/* Graficul vremii  */}\r\n\r\n                  <View style={styles.chartSection}>\r\n                    <Text style={[styles.sectionTitle, dynamicStyles.text]}>Grafic temperaturi</Text>\r\n                    <ScrollView\r\n                      horizontal\r\n                      showsHorizontalScrollIndicator={false}\r\n                      contentContainerStyle={styles.chartScrollContainer}\r\n                      snapToInterval={Dimensions.get('window').width * 0.8} // Snap to 80% of screen width\r\n                      decelerationRate=\"fast\"\r\n                    >\r\n                      <View style={styles.chartWrapper}>\r\n                        <LineChart\r\n                          data={{\r\n                            labels,\r\n                            datasets: [\r\n                              {\r\n                                data: temperatures,\r\n                                color: (opacity = 1) => `rgba(11, 179, 178, ${opacity})`,\r\n                                strokeWidth: 2,\r\n                              },\r\n                            ],\r\n                          }}\r\n                          width={Dimensions.get('window').width * 1.8} // Wider chart for scrolling\r\n                          height={220}\r\n                          chartConfig={chartConfig}\r\n                          bezier\r\n                          withHorizontalLabels={true}\r\n                          withVerticalLabels={true}\r\n                          withInnerLines={false}\r\n                          withOuterLines={false}\r\n                          withDots={true}\r\n                          withShadow={true}\r\n                          withVerticalLines={false}\r\n                          withHorizontalLines={true}\r\n                          style={styles.chart}\r\n                        />\r\n                      </View>\r\n                    </ScrollView>\r\n\r\n                  </View>\r\n\r\n\r\n                  {/* ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   */}\r\n\r\n\r\n\r\n\r\n                  <View style={{ marginTop: 20 }}>\r\n                    <Text style={[{ fontSize: 20, fontWeight: 'bold', marginBottom: 10 }, dynamicStyles.text]}>\r\n                      Cantitate ploaie\r\n                    </Text>\r\n                    <ScrollView horizontal showsHorizontalScrollIndicator={false} style={{ flexDirection: 'row' }}>\r\n                      {weather?.forecast?.forecastday[0]?.hour.map((hour, index) => (\r\n                        <View\r\n                          key={index}\r\n                          style={{\r\n                            backgroundColor: '#333',\r\n                            padding: 10,\r\n                            marginHorizontal: 5,\r\n                            borderRadius: 10,\r\n                            alignItems: 'center',\r\n                            width: 100, // Am mărit lățimea pentru a adăuga mai multe informații\r\n                          }}\r\n                        >\r\n                          <Text style={[{ fontSize: 14 }, dynamicStyles.text]}>\r\n                            {new Date(hour.time).getHours()}:00\r\n                          </Text>\r\n\r\n                          {/* Șansele de precipitații */}\r\n                          <Text style={[{ fontSize: 12, marginTop: 5 }, dynamicStyles.text]}>\r\n                            {hour.precip_mm > 0 ? `${hour.precip_mm} l/m²` : '0 l/m²'} Precip\r\n                          </Text>\r\n\r\n                        </View>\r\n                      ))}\r\n                    </ScrollView>\r\n                  </View>\r\n                </ScrollView>\r\n              )}\r\n            </View>\r\n\r\n\r\n          )}\r\n\r\n          {/* -------------------T O M O R R O W */}\r\n\r\n          {selectedDay === 'TOMORROW' && (\r\n            <View>\r\n              {loading ? (\r\n                <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\r\n                  <Progress.CircleSnail thickness={10} size={140} color=\"#0bb3b2\" />\r\n                </View>\r\n              ) : (\r\n                <ScrollView style={{ marginHorizontal: 16, marginTop: -40 }}>\r\n                  {/* Location Info */}\r\n                  <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                    {/* Imagine vreme */}\r\n                 \r\n                      <View>\r\n                        <Text style={[{ fontSize: 24, fontWeight: 'bold', textAlign: 'center' }, dynamicStyles.text]}>\r\n                          {locationData?.name}, <Text style={{ fontSize: 18, fontWeight: '600',color: '#aaa'}}>{locationData?.region},{locationData?.country}</Text>\r\n                        </Text>\r\n                      </View>\r\n                    </View>\r\n                  <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'flex-start', paddingHorizontal: 20 }}>\r\n                    {/* Left side - Weather icon and info */}\r\n                    <View style={{ flex: 1 }}>\r\n\r\n\r\n                      {/* Weather icon and condition */}\r\n                      <View style={{ alignItems: 'left' }}>\r\n                        <Image\r\n                          style={styles.weatherImage}\r\n                          source={\r\n                            weatherImages[weather?.forecast?.forecastday[1]?.day?.condition?.text.trim()] ||\r\n                            { uri: `https:${weather?.forecast?.forecastday[1]?.day?.condition?.icon}` }\r\n                          }\r\n                              />\r\n                      </View>\r\n                    </View>\r\n\r\n                    {/* Right side - Temperature */}\r\n                    <View style={{ alignItems: 'flex-end',marginTop:20 }}>\r\n                      <Text style={[dynamicStyles.text, { fontSize: 30, fontWeight: '200', }]}>\r\n                      Max: {weather?.forecast?.forecastday[1]?.day?.maxtemp_c}°C {'\\n'}Min: {weather?.forecast?.forecastday[1]?.day?.mintemp_c}°C\r\n                      </Text>\r\n                    </View>\r\n                  </View>\r\n                  {/* Condiție vreme */}\r\n                  <View style={{ marginTop: -25 }}>\r\n                    <Text style={[{ fontFamily: \"poppins-bold\", fontSize: 18, letterSpacing: 1.5, marginBottom: 10, marginTop: 25 }, dynamicStyles.text]}>\r\n                      {weather?.forecast?.forecastday?.[1]?.day.condition?.text}\r\n                    </Text>\r\n                  </View>\r\n\r\n\r\n                  {/* Weather Alerts MAINE */}\r\n                  {/* {weather?.alerts?.alert && weather.alerts.alert.length > 0 ? (\r\n                    <View style={styles.alertContainer}>\r\n                      <Text style={[dynamicStyles.text, styles.alertTitle]}>Alerte meteo:</Text>\r\n                      <View style={styles.alertItem}>\r\n                        <Text style={[dynamicStyles.text, styles.alertHeadline]}>{weather.alerts.alert[0].headline}</Text>\r\n                        <Text style={[dynamicStyles.text, styles.alertDescription]}>{weather.alerts.alert[0].desc}</Text>\r\n                        <Text style={[dynamicStyles.text, styles.alertTime]}>\r\n                          Valabil de la:{' '}\r\n                          {new Date(weather.alerts.alert[0].effective).toLocaleDateString('ro-RO', {\r\n                            year: 'numeric',\r\n                            month: 'long',\r\n                            day: 'numeric',\r\n                          })}{' '}\r\n                          ora: {new Date(weather.alerts.alert[0].effective).toLocaleTimeString('ro-RO', {\r\n                            hour: '2-digit',\r\n                            minute: '2-digit',\r\n                          })}\r\n                          {'\\n'}\r\n                          Până la:{' '}\r\n                          {new Date(weather.alerts.alert[0].expires).toLocaleDateString('ro-RO', {\r\n                            year: 'numeric',\r\n                            month: 'long',\r\n                            day: 'numeric',\r\n                          })}\r\n                          {' '}ora: {new Date(weather.alerts.alert[0].expires).toLocaleTimeString('ro-RO', {\r\n                            hour: '2-digit',\r\n                            minute: '2-digit',\r\n                          })}\r\n                        </Text>\r\n                      </View>\r\n\r\n                    </View>\r\n                  ) : (\r\n                    <View style={styles.noAlertContainer}>\r\n                      <Text style={[dynamicStyles.text, styles.noAlertText]}>NO WEATHER ALERTS</Text>\r\n                    </View>\r\n                  )} */}\r\n\r\n\r\n\r\n\r\n                  {/* Hourly temperatura si precipitatii for TOMORROW */}\r\n                  <View style={{ marginTop: -5 }}>\r\n                    <Text style={[dynamicStyles.text, styles.sectionTitle]}>Vremea pe ore mâine</Text>\r\n                    <ScrollView\r\n                      horizontal\r\n                      showsHorizontalScrollIndicator={false}\r\n                      contentContainerStyle={{ paddingHorizontal: 10 }}\r\n                    >\r\n                      {weather?.forecast?.forecastday[1]?.hour.map((hour, index) => (\r\n                        <View\r\n                          key={index}\r\n                          style={styles.hourlyItem}\r\n                        >\r\n                          <Text style={[styles.hourlyTime, dynamicStyles.text]}>\r\n                            {new Date(hour.time).getHours()}:00\r\n                          </Text>\r\n                          <Image\r\n                            source={{ uri: `https:${hour.condition.icon}` }}\r\n                            style={styles.hourlyIcon}\r\n                          />\r\n                          <Text style={[styles.hourlyTemp, dynamicStyles.text]}>{Math.round(hour.temp_c)}°C</Text>\r\n                          <View style={styles.precipitationContainer}>\r\n                            <Text style={[styles.precipitationLabel, dynamicStyles.text]}>Precipitații</Text>\r\n                            <Text style={[styles.precipitationValue, dynamicStyles.text]}>{hour.precip_mm} mm</Text>\r\n                          </View>\r\n                        </View>\r\n                      ))}\r\n                    </ScrollView>\r\n                  </View>\r\n\r\n                 \r\n                 {/* Weather  */}\r\n                 <View style={styles.statsGrid}>\r\n                    {/* Row 1 */}\r\n                    <View style={styles.statItem}>\r\n                      <Image source={require('../../assets/icons/wind.png')} style={[\r\n                        styles.statIcon,\r\n                        {\r\n                          tintColor: current?.temp_c > 10 ? 'rgba(0,0,0,0.8)' : 'rgba(255, 255, 255, 0.9)'\r\n                        }\r\n                      ]} />\r\n                      <Text style={[styles.statLabel, dynamicStyles.text]}>Wind Speed</Text>\r\n                      <Text style={[styles.statValue, dynamicStyles.text]}>{weather?.forecast?.forecastday?.[1]?.day.maxwind_kph} km/h</Text>\r\n                    </View>\r\n\r\n                    <View style={styles.statItem}>\r\n                      <Image source={require('../../assets/icons/drop.png')} style={[\r\n                        styles.statIcon,\r\n                        {\r\n                          tintColor: current?.temp_c > 10 ? 'rgba(0,0,0,0.8)' : 'rgba(255,255,255,0.9)'\r\n                        }\r\n                      ]} />\r\n                      <Text style={[styles.statLabel, dynamicStyles.text]}>Humidity</Text>\r\n                      <Text style={[styles.statValue, dynamicStyles.text]}>{weather?.forecast?.forecastday?.[1]?.day.avghumidity}%</Text>\r\n                    </View>\r\n\r\n                    {/* Row 2 */}\r\n                    <View style={styles.statItem}>\r\n                       <Image source={require('../../assets/icons/uv.png')} style={[\r\n                        styles.statIcon,\r\n                        {\r\n                          tintColor: current?.temp_c > 10 ? 'rgba(0,0,0,0.8)' : 'rgba(255,255,255,0.9)'\r\n                        }\r\n                      ]} size={24} />\r\n                      <Text style={[styles.statLabel, dynamicStyles.text]}>UV Index</Text>\r\n                      <Text style={[styles.statValue, dynamicStyles.text]}>{weather?.forecast?.forecastday?.[1]?.day.uv}%</Text>\r\n                    </View>\r\n\r\n                    <View style={styles.statItem}>\r\n                    <Image source={require('../../assets/icons/rain.png')} style={[\r\n                        styles.statIcon,\r\n                        {\r\n                          tintColor: current?.temp_c > 10 ? 'rgba(0,0,0,0.8)' : 'rgba(255,255,255,0.9)'\r\n                        }\r\n                      ]} />\r\n                      <Text style={[styles.statLabel, dynamicStyles.text]}>Șanse de ploaie</Text>\r\n                      <Text style={[styles.statValue, dynamicStyles.text]}>{weather?.forecast?.forecastday?.[1]?.day.daily_chance_of_rain}%</Text>\r\n                    </View>\r\n\r\n                    {/* Row 3 */}\r\n                    <View style={styles.statItem}>\r\n                      <Image source={require('../../assets/icons/pressure.png')} style={[\r\n                        styles.statIcon,\r\n                        {\r\n                          tintColor: current?.temp_c > 10 ? 'rgba(0,0,0,0.8)' : 'rgba(255,255,255,0.9)'\r\n                        }\r\n                      ]} />\r\n                      <Text style={[styles.statLabel, dynamicStyles.text]}>Presiune</Text>\r\n                      <Text style={[styles.statValue, dynamicStyles.text]}>{weather?.forecast?.forecastday?.[1]?.hour?.[1]?.pressure_mb} mb</Text>\r\n                    </View>\r\n\r\n                    <View style={styles.statItem}>\r\n                    <Image source={require('../../assets/icons/snow.png')} style={[\r\n                        styles.statIcon,\r\n                        {\r\n                          tintColor: current?.temp_c > 10 ? 'rgba(0,0,0,0.8)' : 'rgba(255,255,255,0.9)'\r\n                        }\r\n                      ]} size={24} />\r\n                      <Text style={[styles.statLabel, dynamicStyles.text]}>Șanse ninsoare</Text>\r\n                      <Text style={[styles.statValue, dynamicStyles.text]}>\r\n                        {weather?.forecast?.forecastday?.[1]?.day?.daily_chance_of_snow || 0}%\r\n                      </Text>\r\n                    </View>\r\n\r\n                    {/* Sunrise/Sunset */}\r\n                    <View style={[styles.sunTimeContainer]}>\r\n                      <View style={styles.sunTimeItem}>\r\n                        <Image source={require('../../assets/icons/sun.png')} style={[\r\n                          styles.statIcon,\r\n                          {\r\n                            tintColor: current?.temp_c > 10 ? 'rgba(0,0,0,0.8)' : 'rgba(255,255,255,0.9)'\r\n                          }\r\n                        ]} />\r\n                        <Text style={[dynamicStyles.text, styles.sunTimeLabel]}>Sunrise</Text>\r\n                        <Text style={[dynamicStyles.text, styles.sunTimeValue]}>\r\n                          {weather?.forecast?.forecastday[1]?.astro?.sunrise}\r\n                        </Text>\r\n                      </View>\r\n\r\n                      <View style={styles.sunTimeItem}>\r\n                        <Image source={require('../../assets/icons/moon.png')} style={[\r\n                          styles.statIcon,\r\n                          {\r\n                            tintColor: current?.temp_c > 10 ? 'rgba(0,0,0,0.8)' : 'rgba(255,255,255,0.9)'\r\n                          }\r\n                        ]} />\r\n                        <Text style={[dynamicStyles.text, styles.sunTimeLabel]}>Sunset</Text>\r\n                        <Text style={[dynamicStyles.text, styles.sunTimeValue]}>\r\n                          {weather?.forecast?.forecastday[1]?.astro?.sunset}\r\n                        </Text>\r\n                      </View>\r\n                    </View>\r\n                  </View>\r\n\r\n                 {/* Graficul temperaturi */}\r\n                  <View style={[styles.chartSection]}>\r\n                    <Text style={[styles.sectionTitle, dynamicStyles.text]}>Grafic temperaturi</Text>\r\n                    <ScrollView\r\n                      horizontal\r\n                      showsHorizontalScrollIndicator={false}\r\n                      contentContainerStyle={styles.chartScrollContainer}\r\n                      snapToInterval={Dimensions.get('window').width * 0.9} // Snap to 80% of screen width\r\n                      decelerationRate=\"fast\"\r\n                    >\r\n                      <View style={styles.chartWrapper}>\r\n                        <LineChart\r\n                          data={{\r\n                            labels,\r\n                            datasets: [\r\n                              {\r\n                                data: temperaturesTomorrow,\r\n                                color: (opacity = 1) => `rgba(11, 179, 178, ${opacity})`,\r\n                                strokeWidth: 2,\r\n                              },\r\n                            ],\r\n                          }}\r\n                          width={Dimensions.get('window').width * 1.8} // Wider chart for scrolling\r\n                          height={220}\r\n                          chartConfig={chartConfig}\r\n                          bezier\r\n                          withHorizontalLabels={true}\r\n                          withVerticalLabels={true}\r\n                          withInnerLines={false}\r\n                          withOuterLines={false}\r\n                          withDots={true}\r\n                          withShadow={true}\r\n                          withVerticalLines={false}\r\n                          withHorizontalLines={true}\r\n                          style={styles.chart}\r\n                        />\r\n                      </View>\r\n\r\n                      <View style={{marginBottom:300}}>\r\n                        \r\n                      </View>\r\n\r\n                    </ScrollView>\r\n\r\n                  </View>\r\n                  {/* ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   */}\r\n\r\n             \r\n\r\n                </ScrollView>\r\n              )}\r\n            </View>\r\n\r\n          )}\r\n{selectedDay === 'FORECAST' && (\r\n  loading ? (\r\n    <View style={styles.loadingContainer}>\r\n      <Progress.CircleSnail thickness={10} size={140} color=\"#0bb3b2\" />\r\n    </View>\r\n  ) : (\r\n    <ScrollView style={styles.forecastContainer}>\r\n      {forecast.map((item) => {\r\n        const date = new Date(item.dt * 1000);\r\n        const dayName = daysOfWeek[date.getDay()];\r\n        const formattedDate = `${date.getDate()} ${date.toLocaleString('ro-RO', { month: 'long' })}`;\r\n\r\n        return (\r\n          <TouchableOpacity key={item.dt} onPress={() => setSelectedForecast(item)}>\r\n            <Card style={styles.forecastCard}>\r\n              <Card.Content style={styles.forecastCardContent}>\r\n                <View style={styles.forecastDateContainer}>\r\n                  <Text style={[styles.forecastDay]}>{dayName}</Text>\r\n                  <Text style={[styles.forecastDate]}>{formattedDate}</Text>\r\n                </View>\r\n\r\n                <View style={styles.forecastTempContainer}>\r\n                  <Text style={[styles.forecastTemp]}>\r\n                    {item.temp.max.toFixed(1)}°C / {item.temp.min.toFixed(1)}°C\r\n                  </Text>\r\n                  <Text style={[styles.forecastRain]}>\r\n                    Rain: {Math.round(item.pop * 100)}%\r\n                  </Text>\r\n                </View>\r\n\r\n                <Image\r\n                  source={{ uri: `https://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png` }}\r\n                  style={[styles.forecastIcon]}\r\n                />\r\n              </Card.Content>\r\n            </Card>\r\n          </TouchableOpacity>\r\n        );\r\n      })}\r\n    </ScrollView>\r\n  )\r\n)}\r\n\r\n{/* Modal pentru detaliile unui forecast selectat */}\r\n<Modal\r\n  visible={!!selectedForecast}\r\n  transparent={true}\r\n  animationType=\"slide\"\r\n  onRequestClose={() => setSelectedForecast(null)}\r\n>\r\n  <View style={styles.modalOverlay}>\r\n    <View style={styles.modalContainer}>\r\n      {selectedForecast && (\r\n        <>\r\n          \r\n          {\r\n            (() => {\r\n              const date = new Date(selectedForecast.dt * 1000);\r\n              const dayName = daysOfWeek[date.getDay()];\r\n              const formattedDate = `${date.getDate()} ${date.toLocaleString('ro-RO', { month: 'long' })}`;\r\n              return (\r\n                <View style={styles.modalHeader}>\r\n                  <Text style={styles.modalTitle}>\r\n                    {dayName}, {formattedDate}\r\n                  </Text>\r\n                  <TouchableOpacity onPress={() => setSelectedForecast(null)}>\r\n                    <Icon name=\"close\" size={24} color=\"#333\" />\r\n                  </TouchableOpacity>\r\n                </View>\r\n              );\r\n            })()\r\n          }\r\n\r\n          <View style={styles.modalContent}>\r\n            <View style={styles.modalWeatherMain}>\r\n              <Image\r\n                source={{\r\n                  uri: `https://openweathermap.org/img/wn/${selectedForecast.weather[0].icon}@4x.png`,\r\n                }}\r\n                style={styles.modalWeatherIcon}\r\n              />\r\n              <Text style={styles.modalTemp}>\r\n                {selectedForecast.temp.day.toFixed(1)}°C\r\n              </Text>\r\n                <Text style={styles.modalWeatherDesc}>\r\n                  {selectedForecast.weather[0].description}\r\n                </Text>\r\n            </View>\r\n\r\n            <View style={styles.modalDetails}>\r\n              <View style={styles.detailRow}>\r\n                <Text style={styles.detailLabel}>Min/Max:</Text>\r\n                <Text style={styles.detailValue}>\r\n                  {selectedForecast.temp.min.toFixed(1)}°C / {selectedForecast.temp.max.toFixed(1)}°C\r\n                </Text>\r\n              </View>\r\n\r\n              <View style={styles.detailRow}>\r\n                <Text style={styles.detailLabel}>Se simte ca:</Text>\r\n                <Text style={styles.detailValue}>\r\n                  {selectedForecast.feels_like.day.toFixed(1)}°C\r\n                </Text>\r\n              </View>\r\n\r\n              <View style={styles.detailRow}>\r\n                <Text style={styles.detailLabel}>Umiditate:</Text>\r\n                <Text style={styles.detailValue}>\r\n                  {selectedForecast.humidity}%\r\n                </Text>\r\n              </View>\r\n\r\n              <View style={styles.detailRow}>\r\n                <Text style={styles.detailLabel}>Presiune:</Text>\r\n                <Text style={styles.detailValue}>\r\n                  {selectedForecast.pressure} hPa\r\n                </Text>\r\n              </View>\r\n\r\n              <View style={styles.detailRow}>\r\n                <Text style={styles.detailLabel}>Vânt:</Text>\r\n                <Text style={styles.detailValue}>\r\n                  {selectedForecast.speed} m/s ({selectedForecast.deg}°)\r\n                </Text>\r\n              </View>\r\n\r\n              <View style={styles.detailRow}>\r\n                <Text style={styles.detailLabel}>Probabilitate precipitații:</Text>\r\n                <Text style={styles.detailValue}>\r\n                  {Math.round(selectedForecast.pop * 100)}%\r\n                </Text>\r\n              </View>\r\n\r\n              {selectedForecast.rain && (\r\n                <View style={styles.detailRow}>\r\n                  <Text style={styles.detailLabel}>Precipitații:</Text>\r\n                  <Text style={styles.detailValue}>\r\n                    {selectedForecast.rain} mm\r\n                  </Text>\r\n                </View>\r\n              )}\r\n\r\n            \r\n            </View>\r\n          </View>\r\n        </>\r\n      )}\r\n    </View>\r\n  </View>\r\n</Modal>\r\n\r\n\r\n        </View>\r\n      </LinearGradient></View>\r\n  );\r\n};\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  temperatureText: {\r\n    fontSize: 72,\r\n    fontWeight: '300',\r\n    textShadowColor: 'rgba(0,0,0,0.1)',\r\n    textShadowOffset: { width: 1, height: 1 },\r\n    textShadowRadius: 10\r\n  },\r\n  backgroundImage: {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    height: '100%',\r\n    opacity: 0.3,\r\n  },\r\n  searchContainer: {\r\n    marginHorizontal: 20,\r\n    marginTop: 50,\r\n    zIndex: 50,\r\n  },\r\n  searchBar: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n    borderRadius: 25,\r\n    paddingHorizontal: 15,\r\n    height: 50,\r\n    marginTop: -30,\r\n  },\r\n  searchInput: {\r\n    flex: 1,\r\n    color: '#fff',\r\n    fontSize: 16,\r\n    paddingLeft: 10,\r\n  },\r\n  searchButton: {\r\n    backgroundColor: '#0bb3b2',\r\n    borderRadius: 20,\r\n    padding: 8,\r\n  },\r\n  locationDropdown: {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    backgroundColor: 'rgba(30, 30, 30, 0.95)',\r\n    top: 60,\r\n    borderRadius: 15,\r\n    paddingVertical: 10,\r\n    zIndex: 100,\r\n    elevation: 10,\r\n    shadowColor: '#000',\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 3,\r\n  },\r\n  locationItem: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    paddingVertical: 12,\r\n    paddingHorizontal: 16,\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: 'rgba(255, 255, 255, 0.1)',\r\n  },\r\n  locationIcon: {\r\n    marginRight: 12,\r\n  },\r\n  locationText: {\r\n    fontSize: 16,\r\n    color: '#fff',\r\n  },\r\n  daySelectorContainer: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginTop: 20,\r\n    marginHorizontal: 20,\r\n    marginBottom: 5,\r\n  },\r\n  daySelector: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-around',\r\n    flex: 1, // ia tot spațiul disponibil\r\n  },\r\n  locationButton: {\r\n    backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n    borderRadius: 20,\r\n    width: 30,\r\n    height: 30,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginLeft: 10, // spațiu între butoane și butonul de locație\r\n  },\r\n  // Păstrează restul stilurilor existente...\r\n  dayButton: {\r\n    backgroundColor: 'transparent',\r\n    paddingHorizontal: 20,\r\n    paddingVertical: 10,\r\n    borderRadius: 20,\r\n  },\r\n  dayButtonActive: {\r\n\r\n    backgroundColor: 'rgba(255, 255, 255, 0.36)',\r\n  },\r\n  dayButtonText: {\r\n    fontWeight: 'bold',\r\n    fontSize: 14,\r\n  },\r\n  weatherHeader: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'flex-start',\r\n    marginTop: 20,\r\n    paddingHorizontal: 20,\r\n  },\r\n  weatherInfoContainer: {\r\n    flex: 1,\r\n    marginRight: 20,\r\n  },\r\n  weatherIconContainer: {\r\n    alignItems: 'center',\r\n    marginBottom: 10,\r\n  },\r\n  weatherIcon: {\r\n    width: 100,\r\n    height: 100,\r\n  },\r\n  weatherCondition: {\r\n    color: '#fff',\r\n    fontSize: 20,\r\n    fontWeight: '600',\r\n    textAlign: 'center',\r\n    marginBottom: 5,\r\n  },\r\n  locationContainer: {\r\n    alignItems: 'center',\r\n    marginBottom: 10,\r\n  },\r\n  locationName: {\r\n    color: '#fff',\r\n    fontSize: 22,\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n  },\r\n  countryName: {\r\n    color: '#aaa',\r\n    fontSize: 16,\r\n    textAlign: 'center',\r\n  },\r\n  tempRange: {\r\n    color: '#fff',\r\n    fontSize: 16,\r\n    textAlign: 'center',\r\n    marginTop: 5,\r\n  },\r\n  currentTempContainer: {\r\n    alignItems: 'flex-end',\r\n    justifyContent: 'center',\r\n    paddingRight: 20,\r\n  },\r\n  currentTemp: {\r\n    color: '#fff',\r\n    fontSize: 64,\r\n    fontWeight: '200',\r\n  },\r\n  currentTempUnit: {\r\n    fontSize: 32,\r\n    marginLeft: 5,\r\n  },\r\n  feelsLike: {\r\n    color: '#aaa',\r\n    fontSize: 16,\r\n    textAlign: 'right',\r\n    marginTop: -10,\r\n  },\r\n\r\n  contentContainer: {\r\n    marginTop: 20,\r\n    paddingHorizontal: 20,\r\n  },\r\n  loadingContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    height: 300,\r\n  },\r\n  currentWeatherHeader: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginBottom: 20,\r\n  },\r\n  weatherImageContainer: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center'\r\n  },\r\n  locationTextLarge: {\r\n    // color: '#fff',\r\n    fontSize: 22,\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n    marginBottom: 10,\r\n  },\r\n  countryText: {\r\n    fontSize: 18,\r\n    fontWeight: '600',\r\n    // color: '#aaa',\r\n  },\r\n  weatherImage: {\r\n    width: 120,\r\n    height: 120,\r\n  },\r\n  temperatureContainer: {\r\n\r\n    flexDirection: 'column',\r\n    alignItems: 'center'\r\n  },\r\n  temperatureText: {\r\n    fontSize: 48,\r\n    // color: '#fff',\r\n    fontWeight: 'bold',\r\n  },\r\n  feelsLikeText: {\r\n    fontSize: 16,\r\n    // color: '#aaa',\r\n    fontFamily: 'poppins',\r\n  },\r\n  weatherConditionText: {\r\n    // color: '#fff',\r\n    fontFamily: 'poppins-bold',\r\n    fontSize: 18,\r\n    letterSpacing: 1,\r\n    marginBottom: 10,\r\n  },\r\n  tempRangeText: {\r\n    fontSize: 16,\r\n    // color: '#aaa',\r\n    fontWeight: 'bold',\r\n    marginBottom: 20,\r\n  },\r\n  alertContainer: {\r\n    backgroundColor: 'rgba(231, 76, 60, 0.2)',\r\n    padding: 15,\r\n    borderRadius: 10,\r\n    marginBottom: 20,\r\n  },\r\n  alertTitle: {\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    // color: '#e74c3c',\r\n    marginBottom: 10,\r\n  },\r\n  alertItem: {\r\n    marginBottom: 15,\r\n  },\r\n  alertHeadline: {\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n    // color: '#fff',\r\n  },\r\n  alertDescription: {\r\n    fontSize: 14,\r\n    // color: '#eee',\r\n    marginVertical: 5,\r\n  },\r\n  alertTime: {\r\n    fontSize: 12,\r\n    // color: '#ccc',\r\n  },\r\n  noAlertContainer: {\r\n    backgroundColor: 'rgba(46, 204, 113, 0.2)',\r\n    padding: 15,\r\n    borderRadius: 10,\r\n    marginBottom: 20,\r\n    alignItems: 'center',\r\n  },\r\n  noAlertText: {\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n    // color: '#2ecc71',\r\n  },\r\n  statsGrid: {\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-between',\r\n    marginBottom: 20,\r\n    marginTop: 20,\r\n  },\r\n  statItem: {\r\n    width: '48%',\r\n    backgroundColor: 'rgba(255, 255, 255, 0.1)',\r\n    borderRadius: 12,\r\n    padding: 15,\r\n    marginBottom: 15,\r\n    alignItems: 'center',\r\n  },\r\n  statIcon: {\r\n    width: 24,\r\n    height: 24,\r\n    marginBottom: 8,\r\n  },\r\n  statLabel: {\r\n    // color: '#aaa',\r\n    fontSize: 14,\r\n    marginBottom: 5,\r\n    fontFamily: 'poppins',\r\n  },\r\n  statValue: {\r\n    // color: '#fff',\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    fontFamily: 'poppins-bold',\r\n  },\r\n  sunTimeContainer: {\r\n    flexDirection: 'row',\r\n    width: '100%',\r\n    justifyContent: 'space-between',\r\n    marginTop: 10,\r\n  },\r\n  sunTimeItem: {\r\n    width: '48%',\r\n    backgroundColor: 'rgba(255, 255, 255, 0.1)',\r\n    borderRadius: 12,\r\n    padding: 15,\r\n    alignItems: 'center',\r\n  },\r\n  sunIcon: {\r\n    width: 24,\r\n    height: 24,\r\n    marginBottom: 8,\r\n  },\r\n  sunTimeLabel: {\r\n    // color: '#aaa',\r\n    fontSize: 14,\r\n    marginBottom: 5,\r\n  },\r\n  sunTimeValue: {\r\n    // color: '#fff',\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n  },\r\n  sectionTitle: {\r\n    // color: '#fff',\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n    marginBottom: 15,\r\n    marginTop: 20,\r\n  },\r\n  hourlyItem: {\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    backgroundColor: 'rgba(255, 255, 255, 0.15)',\r\n    borderRadius: 12,\r\n    padding: 10,\r\n    marginRight: 10,\r\n    width: 80,\r\n  },\r\n  hourlyTime: {\r\n    // color: '#fff',\r\n    fontSize: 14,\r\n    marginBottom: 5,\r\n  },\r\n  hourlyIcon: {\r\n    width: 30,\r\n    height: 30,\r\n    marginBottom: 5,\r\n  },\r\n  hourlyTemp: {\r\n    // color: '#fff',\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n    marginBottom: 5,\r\n  },\r\n  precipitationContainer: {\r\n    alignItems: 'center',\r\n  },\r\n  precipitationLabel: {\r\n    // color: '#fff',\r\n    fontSize: 10,\r\n    opacity: 0.8,\r\n  },\r\n  precipitationValue: {\r\n    // color: '#fff',\r\n    fontSize: 12,\r\n    fontWeight: '600',\r\n  },\r\n  hourlyTime: {\r\n    // color: '#fff',\r\n    fontSize: 14,\r\n    marginBottom: 5,\r\n  },\r\n  chart: {\r\n    marginVertical: 8,\r\n    borderRadius: 16,\r\n  },\r\n  forecastContainer: {\r\n    marginTop: -30,\r\n    marginBottom:130,\r\n  },\r\n  forecastCard: {\r\n    backgroundColor: 'rgb(200, 200, 190)', \r\n    borderRadius: 12,\r\n    marginVertical: 8,\r\n    marginHorizontal: 16,\r\n    borderWidth: 1,\r\n    borderColor: 'rgba(255, 255, 255, 0.3)',\r\n    elevation: 0, // Elimină umbra pe Android\r\n    shadowOpacity: 0, // Elimină umbra pe iOS\r\n  },\r\n  forecastCardContent: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    padding: 16,\r\n  },\r\n  forecastDateContainer: {\r\n    flex: 1,\r\n  },\r\n  forecastDay: {\r\n    // color: '#fff',\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n  },\r\n  forecastDate: {\r\n    // color: '#aaa',\r\n    fontSize: 14,\r\n  },\r\n  forecastTempContainer: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n  },\r\n  forecastTemp: {\r\n    // color: '#fff',\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n  },\r\n  forecastRain: {\r\n    // color: '#0bb3b2',\r\n    fontSize: 14,\r\n  },\r\n  forecastIcon: {\r\n    width: 50,\r\n    height: 50,\r\n  },\r\n  chartSection: {\r\n    marginTop: -10,\r\n    marginBottom: 100,\r\n  },\r\n  chartScrollContainer: {\r\n    paddingLeft: 20,\r\n    paddingRight: 40,\r\n  },\r\n  chartWrapper: {\r\n    borderRadius: 16,\r\n    backgroundColor: 'rgba(161, 12, 12, 0.03)',\r\n    padding: 20,\r\n    paddingRight: 20,\r\n  },\r\n  chart: {\r\n    borderRadius: 12,\r\n  },\r\n  mapCard: {\r\n    overflow: 'hidden',\r\n    borderRadius: 10,\r\n    marginBottom: 15,\r\n  },\r\n  map: {\r\n    height: 250,\r\n    width: '100%',\r\n  },\r\n  modalOverlay: {\r\n    flex: 1,\r\n    backgroundColor: 'rgba(0,0,0,0.5)',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  modalContainer: {\r\n    backgroundColor: 'white',\r\n    borderRadius: 20,\r\n    padding: 20,\r\n    width: '90%',\r\n    maxHeight: '80%',\r\n  },\r\n  modalHeader: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginBottom: 15,\r\n  },\r\n  modalTitle: {\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n  },\r\n  modalContent: {\r\n    flexDirection: 'column',\r\n  },\r\n  modalWeatherMain: {\r\n    alignItems: 'center',\r\n    marginBottom: 20,\r\n  },\r\n  modalWeatherIcon: {\r\n    width: 100,\r\n    height: 100,\r\n  },\r\n  modalTemp: {\r\n    fontSize: 36,\r\n    fontWeight: 'bold',\r\n  },\r\n  modalWeatherDesc: {\r\n    fontSize: 16,\r\n    textTransform: 'capitalize',\r\n  },\r\n  modalDetails: {\r\n    marginTop: 10,\r\n  },\r\n  detailRow: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    paddingVertical: 8,\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: '#eee',\r\n  },\r\n  detailLabel: {\r\n    fontWeight: 'bold',\r\n    color: '#555',\r\n  },\r\n  detailValue: {\r\n    color: '#333',\r\n  },\r\n\r\n});\r\n\r\nexport default WeatherComponent;\r\n\r\n"
        }
    ]
}