{
    "sourceFile": "app/(public)/login.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1745762340072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1745762340072,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\r\nimport { View, Text, TextInput, StyleSheet, TouchableOpacity, Alert } from 'react-native';\r\nimport { signInWithEmailAndPassword } from 'firebase/auth';\r\nimport { auth } from '../../functions/FirebaseConfig';\r\nimport Spinner from 'react-native-loading-spinner-overlay';\r\nimport Ionicons from '@expo/vector-icons/Ionicons';\r\nimport Colors\r\nimport { Link } from 'expo-router';\r\nimport { Pressable } from 'react-native';\r\nimport { useRouter } from 'expo-router';\r\n\r\nconst Login = () => {\r\n  const [emailAddress, setEmailAddress] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n  const router = useRouter();\r\n\r\n  const togglePasswordVisibility = () => {\r\n    setIsPasswordVisible(!isPasswordVisible);\r\n  };\r\n\r\n  const validateEmail = (email) => {\r\n    const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\r\n    if (email.length < 5) {\r\n      return 'Email-ul este prea scurt';\r\n    }\r\n    if (!emailPattern.test(email)) {\r\n      return 'Adresa de email nu este validă';\r\n    }\r\n    return '';\r\n  };\r\n\r\n  const validatePassword = (password) => {\r\n    if (password.length < 8) {\r\n      return 'Parola trebuie sa aiba cel putin 8 caractere';\r\n    }\r\n    return '';\r\n  };\r\n\r\n  const onLoginPress = async () => {\r\n    const emailError = validateEmail(emailAddress);\r\n    if (emailError) {\r\n      setError(emailError);\r\n      return;\r\n    }\r\n\r\n    const passwordError = validatePassword(password);\r\n    if (passwordError) {\r\n      setError(passwordError);\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      await signInWithEmailAndPassword(auth, emailAddress, password);\r\n      setLoading(false);\r\n      setError('');\r\n      router.push('/home'); \r\n      alert('Te-ai autentificat cu succes!');\r\n    } catch (err) {\r\n      setLoading(false);\r\n      console.error('Eroare Firebase:', err);\r\n      if (err.code === 'auth/user-not-found') {\r\n        setError('Nu există un cont cu acest email.');\r\n      } else if (err.code === 'auth/wrong-password') {\r\n        setError('Parola este incorectă.');\r\n      } else {\r\n        setError('A apărut o eroare, te rugăm să încerci din nou.');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Spinner visible={loading} />\r\n      <Text style={styles.loginTitle}>Log in</Text>\r\n\r\n      <View style={styles.loginForm}>\r\n        {/* Email Input */}\r\n        <View style={styles.group}>\r\n          <Text style={styles.label}>Email</Text>\r\n          <View style={styles.underlineContainer}>\r\n            <Ionicons name=\"person-sharp\" size={24} color={Colors.DARKGREEN} style={{ marginRight: 8 }} />\r\n            <TextInput\r\n              autoCapitalize=\"none\"\r\n              placeholder=\"Introdu adresa de email\"\r\n              value={emailAddress}\r\n              onChangeText={setEmailAddress}\r\n              style={[styles.inputField, { flex: 1 }]}\r\n            />\r\n          </View>\r\n        </View>\r\n\r\n        {/* Parola Input */}\r\n        <View style={styles.group}>\r\n          <Text style={styles.label}>Parola</Text>\r\n          <View style={styles.underlineContainer}>\r\n            <Ionicons name=\"lock-open\" size={24} color={Colors.DARKGREEN} style={{ marginRight: 8 }} />\r\n            <TextInput\r\n              placeholder=\"Introdu parola\"\r\n              value={password}\r\n              onChangeText={setPassword}\r\n              secureTextEntry={!isPasswordVisible}\r\n              style={[styles.inputField, { flex: 1 }]}\r\n            />\r\n            <TouchableOpacity onPress={togglePasswordVisibility}>\r\n              <Ionicons\r\n                name={isPasswordVisible ? \"eye-off\" : \"eye\"}\r\n                size={24}\r\n                color={Colors.DARKGREEN}\r\n              />\r\n            </TouchableOpacity>\r\n          </View>\r\n          {error && <Text style={styles.errorMessage}>{error}</Text>}\r\n        </View>\r\n\r\n        {/* Login Button */}\r\n        <View style={styles.group}>\r\n          <TouchableOpacity style={styles.button} onPress={onLoginPress}>\r\n            <Text style={styles.buttonText}>Conectează-te</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n\r\n        {/* Link to Reset Password */}\r\n        <View style={{ marginTop: 20 }}>\r\n          <TouchableOpacity onPress={() => router.push('/reset')}>\r\n            <Text style={styles.link}>Am uitat parola?</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 20,\r\n    justifyContent: 'center',\r\n  },\r\n  loginTitle: {\r\n    fontSize: 28,\r\n    fontFamily: 'poppins-bold', // Use the Poppins font\r\n    textAlign: 'left',\r\n    marginTop: 20,\r\n    color: 'black',\r\n  },\r\n  loginForm: {\r\n    marginTop: 45,\r\n  },\r\n  group: {\r\n    marginBottom: 35,\r\n  },\r\n  underlineContainer: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: Colors.GRAY,\r\n    paddingBottom: 5,\r\n  },\r\n  errorMessage: {\r\n    color: 'red',\r\n    fontSize: 16,\r\n    marginTop: 10,\r\n    marginBottom: -10,\r\n    fontFamily: 'poppins',\r\n  },\r\n  inputField: {\r\n    fontFamily: 'poppins',\r\n    fontSize: 16,\r\n    padding: 5,\r\n    color: '#000',\r\n  },\r\n  button: {\r\n    backgroundColor: Colors.GREEN,\r\n    padding: 15,\r\n    borderRadius: 25,\r\n    alignItems: 'center',\r\n  },\r\n  buttonText: {\r\n    color: Colors.WHITE,\r\n    fontSize: 16,\r\n    textTransform: 'uppercase',\r\n    fontFamily: 'Poppins', // Use the Poppins font\r\n  },\r\n  link: {\r\n    color: Colors.DARKGREEN,\r\n    fontSize: 16,\r\n    textAlign: 'center',\r\n    textDecorationLine: 'underline',\r\n  },\r\n});\r\n\r\nexport default Login;\r\n"
        }
    ]
}