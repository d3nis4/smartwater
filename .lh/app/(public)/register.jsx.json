{
    "sourceFile": "app/(public)/register.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1745762456054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745762461312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { auth } from '../../functions/FirebaseConfig';\r\n \r\n import Spinner from 'react-native-loading-spinner-overlay';\r\n import Ionicons from '@expo/vector-icons/Ionicons';\r\n-import { Colors } from '../../constants/Colors';\r\n+import { Colors } from '../../constants/ț\r\n import { Link } from 'expo-router';\r\n import { Pressable } from 'react-native';\r\n \r\n const Register = () => {\r\n"
                },
                {
                    "date": 1745762468628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { auth } from '../../functions/FirebaseConfig';\r\n \r\n import Spinner from 'react-native-loading-spinner-overlay';\r\n import Ionicons from '@expo/vector-icons/Ionicons';\r\n-import { Colors } from '../../constan\r\n+import { Colors } from '../../constan'\r\n import { Link } from 'expo-router';\r\n import { Pressable } from 'react-native';\r\n \r\n const Register = () => {\r\n"
                },
                {
                    "date": 1745762523739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { auth } from '../../functions/FirebaseConfig';\r\n \r\n import Spinner from 'react-native-loading-spinner-overlay';\r\n import Ionicons from '@expo/vector-icons/Ionicons';\r\n-import { Colors } from '../../constants/Colors';\r\n+import Colors\r\n import { Link } from 'expo-router';\r\n import { Pressable } from 'react-native';\r\n \r\n const Register = () => {\r\n"
                }
            ],
            "date": 1745762456054,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\r\nimport { View, Text, TextInput, StyleSheet, TouchableOpacity,TouchableWithoutFeedback,Modal,Platform } from 'react-native';\r\nimport { createUserWithEmailAndPassword, sendEmailVerification } from \"firebase/auth\";\r\nimport { auth } from '../../functions/FirebaseConfig';\r\n\r\nimport Spinner from 'react-native-loading-spinner-overlay';\r\nimport Ionicons from '@expo/vector-icons/Ionicons';\r\nimport { Colors } from '../../constants/Colors';\r\nimport { Link } from 'expo-router';\r\nimport { Pressable } from 'react-native';\r\n\r\nconst Register = () => {\r\n  const [emailAddress, setEmailAddress] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n  const [isConfirmPasswordVisible, setIsConfirmPasswordVisible] = useState(false);\r\n  const [code, setCode] = useState(''); // Adaugă acest state pentru codul de email\r\n  const [modalVisible, setModalVisible] = useState(false); \r\n  const togglePasswordVisibility = () => {\r\n    setIsPasswordVisible(!isPasswordVisible);\r\n  };\r\n\r\n  const toggleConfirmPasswordVisibility = () => {\r\n    setIsConfirmPasswordVisible(!isConfirmPasswordVisible);\r\n  };\r\n\r\n  const validateEmail = (email) => {\r\n    const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\r\n    if (email.length < 5) {\r\n      return 'Email-ul este prea scurt';\r\n    }\r\n    if (!emailPattern.test(email)) {\r\n      return 'Adresa de email nu este validă';\r\n    }\r\n    return '';\r\n  };\r\n\r\n  const validatePassword = (password) => {\r\n    if (password.length < 8) {\r\n      return 'Parola trebuie sa aiba cel putin 8 caractere';\r\n    }\r\n    return '';\r\n  };\r\n  const onSignUpPress = async () => {\r\n    if (password !== confirmPassword) {\r\n      setError('Parolele nu corespund!');\r\n      return;\r\n    }\r\n\r\n    const emailError = validateEmail(emailAddress);\r\n    if (emailError) {\r\n      setError(emailError);\r\n      return;\r\n    }\r\n\r\n    const passwordError = validatePassword(password);\r\n    if (passwordError) {\r\n      setError(passwordError);\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      // Crearea unui utilizator în Firebase\r\n      const userCredential = await createUserWithEmailAndPassword(auth, emailAddress, password);\r\n      const user = userCredential.user;\r\n\r\n      // Trimiterea unui email de verificare\r\n      await sendEmailVerification(user);\r\n      setLoading(false);\r\n      setError('');\r\n      alert('Contul a fost creat cu succes! Te rugăm să verifici email-ul pentru a-ți activa contul.');\r\n\r\n    } catch (err) {\r\n      setLoading(false);\r\n      console.error(\"Eroare Firebase:\", err); \r\n      if (err === 'auth/email-already-in-use') {\r\n        setError('Adresa de email este deja înregistrată.');\r\n      } else {\r\n        setError('A apărut o eroare, te rugăm să încerci din nou.');\r\n      }\r\n    }\r\n  };\r\n\r\n  // Funcția de verificare a codului\r\n  const onPressVerify = async () => {\r\n    if (code.length === 0) {\r\n      setError('Te rugăm să introduci codul primit pe email.');\r\n      return;\r\n    }\r\n    // Adaugă logica pentru verificarea codului, în funcție de implementarea ta Firebase\r\n    alert('Codul a fost verificat cu succes!');\r\n  };\r\n\r\n  return (\r\n\r\n    \r\n    <View style={styles.container}>\r\n      <Spinner visible={loading} />\r\n\r\n      <Text style={styles.loginTitle}>Sign Up</Text>\r\n\r\n      <View style={styles.loginForm}>\r\n\r\n        {/* Email Input */}\r\n        <View style={styles.group}>\r\n          <Text style={styles.label}>Email</Text>\r\n          <View style={styles.underlineContainer}>\r\n            <Ionicons name=\"person-sharp\" size={24} color={Colors.DARKGREEN} style={{ marginRight: 8 }} />\r\n            <TextInput\r\n              autoCapitalize=\"none\"\r\n              placeholder=\"Introdu adresa de email\"\r\n              value={emailAddress}\r\n              onChangeText={setEmailAddress}\r\n              style={[styles.inputField, { flex: 1 }]}\r\n            />\r\n          </View>\r\n\r\n          {/* Mesaj eroare pentru email\r\n              {emailError && <Text style={styles.errorMessage}>{emailError}</Text>} */}\r\n        </View>\r\n\r\n        <View style={styles.group}>\r\n          <Text style={styles.label}>Parola</Text>\r\n          <View style={styles.underlineContainer}>\r\n            <Ionicons name=\"lock-open\" size={24} color={Colors.DARKGREEN} style={{ marginRight: 8 }} />\r\n            <TextInput\r\n              placeholder=\"Introdu parola\"\r\n              value={password}\r\n              onChangeText={setPassword}\r\n              secureTextEntry={!isPasswordVisible}\r\n              style={[styles.inputField, { flex: 1 }]}\r\n            />\r\n            <TouchableOpacity onPress={togglePasswordVisibility}>\r\n              <Ionicons\r\n                name={isPasswordVisible ? \"eye-off\" : \"eye\"}\r\n                size={24}\r\n                color={Colors.DARKGREEN}\r\n              />\r\n            </TouchableOpacity>\r\n          </View>\r\n\r\n        \r\n        </View>\r\n\r\n        {/* Confirm Password Input */}\r\n        <View style={styles.group}>\r\n          <Text style={styles.label}>Reintrodu parola</Text>\r\n          <View style={styles.underlineContainer}>\r\n            <Ionicons name=\"lock-open\" size={24} color={Colors.DARKGREEN} style={{ marginRight: 8 }} />\r\n            <TextInput\r\n              placeholder=\"Introdu din nou parola\"\r\n              value={confirmPassword}\r\n              onChangeText={setConfirmPassword}\r\n              secureTextEntry={!isConfirmPasswordVisible}\r\n              style={[styles.inputField, { flex: 1 }]}\r\n            />\r\n            <TouchableOpacity onPress={toggleConfirmPasswordVisibility}>\r\n              <Ionicons\r\n                name={isConfirmPasswordVisible ? \"eye-off\" : \"eye\"}\r\n                size={24}\r\n                color={Colors.DARKGREEN}\r\n              />\r\n            </TouchableOpacity>\r\n          </View>\r\n          {error && <Text style={styles.errorMessage}>{error}</Text>}\r\n\r\n         </View>\r\n\r\n\r\n\r\n        {/* Sign Up Button */}\r\n\r\n        <View style={styles.group}>\r\n          <TouchableOpacity style={styles.button} onPress={onSignUpPress}>\r\n            <Text style={styles.buttonText}>Creeaza contul</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n\r\n        {/* Sign in button  */}\r\n        <View style={{ marginTop: 100 }}>\r\n          <Text style={{\r\n            textAlign: 'center',\r\n            fontSize: 16,\r\n            fontFamily: 'poppins'\r\n          }}>Ai deja un cont?</Text>\r\n          <Link href=\"/(public)/login\" asChild>\r\n            <Pressable style={{\r\n              backgroundColor: Colors.PRIMARY,\r\n              padding: 15,\r\n              marginTop: 10,\r\n              borderRadius: 25,\r\n              alignItems: 'center',\r\n            }}>\r\n              <Text style={styles.link}>Conecteaza-te</Text>\r\n            </Pressable>\r\n          </Link>\r\n\r\n        </View>\r\n      </View>\r\n\r\n\r\n\r\n     \r\n\r\n      {/* Cod de verificare */}\r\n      <Modal\r\n        animationType=\"slide\"\r\n        transparent={true}\r\n        visible={modalVisible}\r\n        onRequestClose={() => setModalVisible(false)}\r\n      >\r\n        <View style={styles.modalContainer}>\r\n          <View style={styles.modalContent}>\r\n            <Text style={styles.modalTitle}>Introdu codul primit pe email</Text>\r\n            <TextInput\r\n              value={code}\r\n              placeholder=\"Cod...\"\r\n              style={[styles.inputField, styles.underlineContainer]}\r\n              onChangeText={setCode}\r\n            />\r\n            {error && <Text style={styles.errorMessage}>{error}</Text>}\r\n            <TouchableOpacity style={styles.button} onPress={onPressVerify}>\r\n              <Text style={styles.buttonText}>Verifica email-ul</Text>\r\n            </TouchableOpacity>\r\n            <TouchableOpacity style={styles.button} onPress={() => setModalVisible(false)}>\r\n              <Text style={styles.buttonText}>Anulează</Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n        </View>\r\n      </Modal>\r\n    </View>\r\n\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 20,\r\n    justifyContent: 'center',\r\n  },\r\n  loginHtml: {\r\n    width: '100%',\r\n    padding: 30,\r\n  },\r\n  loginTitle: {\r\n    fontSize: 28,\r\n    fontFamily: 'poppins-bold', // Use the Poppins font\r\n    textAlign: 'left',\r\n    marginTop: 20,\r\n    color: 'black'\r\n  },\r\n  loginForm: {\r\n    marginTop: 45,\r\n  },\r\n  group: {\r\n    marginBottom: 35,\r\n  },\r\n  underlineContainer: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: Colors.GRAY,\r\n    paddingBottom: 5,\r\n  },\r\n  errorMessage: {\r\n    color: 'red',\r\n    fontSize: 16,\r\n    marginTop: 10,\r\n    marginBottom: -10,\r\n    fontFamily: 'poppins'\r\n  },\r\n  inputField: {\r\n    fontFamily: 'poppins',\r\n    fontSize: 16,\r\n    padding: 5,\r\n    color: '#000',\r\n  },\r\n  button: {\r\n    backgroundColor: Colors.GREEN,\r\n    padding: 15,\r\n    borderRadius: 25,\r\n    alignItems: 'center',\r\n  },\r\n  buttonText: {\r\n    color: Colors.WHITE,\r\n    fontSize: 16,\r\n    textTransform: 'uppercase',\r\n    fontFamily: 'Poppins', // Use the Poppins font\r\n  },\r\n  link: {\r\n    color: Colors.DARKGREEN,\r\n    marginVertical: 5,\r\n    fontSize: 16,\r\n    fontFamily: 'Poppins', // Use the Poppins font\r\n  },\r\n});\r\n\r\nexport default Register;"
        }
    ]
}